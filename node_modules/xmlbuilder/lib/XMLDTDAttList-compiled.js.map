{"version":3,"sources":["XMLDTDAttList.js"],"names":[],"mappings":"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","file":"XMLDTDAttList-compiled.js","sourcesContent":["// Generated by CoffeeScript 1.9.1\n(function() {\n  var XMLDTDAttList, create;\n\n  create = require('lodash/object/create');\n\n  module.exports = XMLDTDAttList = (function() {\n    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      this.stringify = parent.stringify;\n      if (elementName == null) {\n        throw new Error(\"Missing DTD element name\");\n      }\n      if (attributeName == null) {\n        throw new Error(\"Missing DTD attribute name\");\n      }\n      if (!attributeType) {\n        throw new Error(\"Missing DTD attribute type\");\n      }\n      if (!defaultValueType) {\n        throw new Error(\"Missing DTD attribute default\");\n      }\n      if (defaultValueType.indexOf('#') !== 0) {\n        defaultValueType = '#' + defaultValueType;\n      }\n      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT\");\n      }\n      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Default value only applies to #FIXED or #DEFAULT\");\n      }\n      this.elementName = this.stringify.eleName(elementName);\n      this.attributeName = this.stringify.attName(attributeName);\n      this.attributeType = this.stringify.dtdAttType(attributeType);\n      this.defaultValue = this.stringify.dtdAttDefault(defaultValue);\n      this.defaultValueType = defaultValueType;\n    }\n\n    XMLDTDAttList.prototype.toString = function(options, level) {\n      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;\n      pretty = (options != null ? options.pretty : void 0) || false;\n      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';\n      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;\n      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\\n';\n      level || (level = 0);\n      space = new Array(level + offset + 1).join(indent);\n      r = '';\n      if (pretty) {\n        r += space;\n      }\n      r += '<!ATTLIST ' + this.elementName + ' ' + this.attributeName + ' ' + this.attributeType;\n      if (this.defaultValueType !== '#DEFAULT') {\n        r += ' ' + this.defaultValueType;\n      }\n      if (this.defaultValue) {\n        r += ' \"' + this.defaultValue + '\"';\n      }\n      r += '>';\n      if (pretty) {\n        r += newline;\n      }\n      return r;\n    };\n\n    return XMLDTDAttList;\n\n  })();\n\n}).call(this);\n"]}