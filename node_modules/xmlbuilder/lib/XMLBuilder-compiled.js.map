{"version":3,"sources":["XMLBuilder.js"],"names":[],"mappings":"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","file":"XMLBuilder-compiled.js","sourcesContent":["// Generated by CoffeeScript 1.9.1\n(function() {\n  var XMLBuilder, XMLDeclaration, XMLDocType, XMLElement, XMLStringifier;\n\n  XMLStringifier = require('./XMLStringifier');\n\n  XMLDeclaration = require('./XMLDeclaration');\n\n  XMLDocType = require('./XMLDocType');\n\n  XMLElement = require('./XMLElement');\n\n  module.exports = XMLBuilder = (function() {\n    function XMLBuilder(name, options) {\n      var root, temp;\n      if (name == null) {\n        throw new Error(\"Root element needs a name\");\n      }\n      if (options == null) {\n        options = {};\n      }\n      this.options = options;\n      this.stringify = new XMLStringifier(options);\n      temp = new XMLElement(this, 'doc');\n      root = temp.element(name);\n      root.isRoot = true;\n      root.documentObject = this;\n      this.rootObject = root;\n      if (!options.headless) {\n        root.declaration(options);\n        if ((options.pubID != null) || (options.sysID != null)) {\n          root.doctype(options);\n        }\n      }\n    }\n\n    XMLBuilder.prototype.root = function() {\n      return this.rootObject;\n    };\n\n    XMLBuilder.prototype.end = function(options) {\n      return this.toString(options);\n    };\n\n    XMLBuilder.prototype.toString = function(options) {\n      var indent, newline, offset, pretty, r, ref, ref1, ref2;\n      pretty = (options != null ? options.pretty : void 0) || false;\n      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';\n      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;\n      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\\n';\n      r = '';\n      if (this.xmldec != null) {\n        r += this.xmldec.toString(options);\n      }\n      if (this.doctype != null) {\n        r += this.doctype.toString(options);\n      }\n      r += this.rootObject.toString(options);\n      if (pretty && r.slice(-newline.length) === newline) {\n        r = r.slice(0, -newline.length);\n      }\n      return r;\n    };\n\n    return XMLBuilder;\n\n  })();\n\n}).call(this);\n"]}