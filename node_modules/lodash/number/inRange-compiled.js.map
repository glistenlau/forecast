{"version":3,"sources":["inRange.js"],"names":[],"mappings":";AACA,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG;IACpB,SAAS,GAAG,IAAI,CAAC,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AAiCzB,SAAS,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE;AAClC,OAAK,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC;AACpB,MAAI,GAAG,KAAK,SAAS,EAAE;AACrB,OAAG,GAAG,KAAK,CAAC;AACZ,SAAK,GAAG,CAAC,CAAC;GACX,MAAM;AACL,OAAG,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;GACjB;AACD,SAAO,KAAK,IAAI,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;CACxE;;AAED,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"inRange-compiled.js","sourcesContent":["/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Checks if `n` is between `start` and up to but not including, `end`. If\n * `end` is not specified it's set to `start` with `start` then set to `0`.\n *\n * @static\n * @memberOf _\n * @category Number\n * @param {number} n The number to check.\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `n` is in the range, else `false`.\n * @example\n *\n * _.inRange(3, 2, 4);\n * // => true\n *\n * _.inRange(4, 8);\n * // => true\n *\n * _.inRange(4, 2);\n * // => false\n *\n * _.inRange(2, 2);\n * // => false\n *\n * _.inRange(1.2, 2);\n * // => true\n *\n * _.inRange(5.2, 4);\n * // => false\n */\nfunction inRange(value, start, end) {\n  start = +start || 0;\n  if (end === undefined) {\n    end = start;\n    start = 0;\n  } else {\n    end = +end || 0;\n  }\n  return value >= nativeMin(start, end) && value < nativeMax(start, end);\n}\n\nmodule.exports = inRange;\n"]}