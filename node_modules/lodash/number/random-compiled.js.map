{"version":3,"sources":["random.js"],"names":[],"mappings":"AAAA,IAAI,UAAU,GAAG,OAAO,CAAC,wBAAwB,CAAC;IAC9C,cAAc,GAAG,OAAO,CAAC,4BAA4B,CAAC;;;AAAC,AAG3D,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG;IACpB,YAAY,GAAG,IAAI,CAAC,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AA6B/B,SAAS,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE;AAClC,MAAI,QAAQ,IAAI,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,CAAC,EAAE;AAClD,OAAG,GAAG,QAAQ,GAAG,SAAS,CAAC;GAC5B;AACD,MAAI,KAAK,GAAG,GAAG,IAAI,IAAI;MACnB,KAAK,GAAG,GAAG,IAAI,IAAI,CAAC;;AAExB,MAAI,QAAQ,IAAI,IAAI,EAAE;AACpB,QAAI,KAAK,IAAI,OAAO,GAAG,IAAI,SAAS,EAAE;AACpC,cAAQ,GAAG,GAAG,CAAC;AACf,SAAG,GAAG,CAAC,CAAC;KACT,MACI,IAAI,OAAO,GAAG,IAAI,SAAS,EAAE;AAChC,cAAQ,GAAG,GAAG,CAAC;AACf,WAAK,GAAG,IAAI,CAAC;KACd;GACF;AACD,MAAI,KAAK,IAAI,KAAK,EAAE;AAClB,OAAG,GAAG,CAAC,CAAC;AACR,SAAK,GAAG,KAAK,CAAC;GACf;AACD,KAAG,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;AAChB,MAAI,KAAK,EAAE;AACT,OAAG,GAAG,GAAG,CAAC;AACV,OAAG,GAAG,CAAC,CAAC;GACT,MAAM;AACL,OAAG,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;GACjB;AACD,MAAI,QAAQ,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE;AAClC,QAAI,IAAI,GAAG,YAAY,EAAE,CAAC;AAC1B,WAAO,SAAS,CAAC,GAAG,GAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,UAAU,CAAC,KAAK,IAAI,CAAC,IAAI,GAAG,EAAE,CAAA,CAAE,MAAM,GAAG,CAAC,CAAA,AAAC,CAAC,CAAA,AAAC,AAAC,EAAE,GAAG,CAAC,CAAC;GAClG;AACD,SAAO,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;CAC7B;;AAED,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC","file":"random-compiled.js","sourcesContent":["var baseRandom = require('../internal/baseRandom'),\n    isIterateeCall = require('../internal/isIterateeCall');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between `min` and `max` (inclusive). If only one\n * argument is provided a number between `0` and the given number is returned.\n * If `floating` is `true`, or either `min` or `max` are floats, a floating-point\n * number is returned instead of an integer.\n *\n * @static\n * @memberOf _\n * @category Number\n * @param {number} [min=0] The minimum possible value.\n * @param {number} [max=1] The maximum possible value.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(min, max, floating) {\n  if (floating && isIterateeCall(min, max, floating)) {\n    max = floating = undefined;\n  }\n  var noMin = min == null,\n      noMax = max == null;\n\n  if (floating == null) {\n    if (noMax && typeof min == 'boolean') {\n      floating = min;\n      min = 1;\n    }\n    else if (typeof max == 'boolean') {\n      floating = max;\n      noMax = true;\n    }\n  }\n  if (noMin && noMax) {\n    max = 1;\n    noMax = false;\n  }\n  min = +min || 0;\n  if (noMax) {\n    max = min;\n    min = 0;\n  } else {\n    max = +max || 0;\n  }\n  if (floating || min % 1 || max % 1) {\n    var rand = nativeRandom();\n    return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);\n  }\n  return baseRandom(min, max);\n}\n\nmodule.exports = random;\n"]}