{"version":3,"sources":["sortBy.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC;IAClD,OAAO,GAAG,OAAO,CAAC,qBAAqB,CAAC;IACxC,UAAU,GAAG,OAAO,CAAC,wBAAwB,CAAC;IAC9C,gBAAgB,GAAG,OAAO,CAAC,8BAA8B,CAAC;IAC1D,cAAc,GAAG,OAAO,CAAC,4BAA4B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AAkD3D,SAAS,MAAM,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE;AAC7C,MAAI,UAAU,IAAI,IAAI,EAAE;AACtB,WAAO,EAAE,CAAC;GACX;AACD,MAAI,OAAO,IAAI,cAAc,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE;AAC5D,YAAQ,GAAG,SAAS,CAAC;GACtB;AACD,MAAI,KAAK,GAAG,CAAC,CAAC,CAAC;AACf,UAAQ,GAAG,YAAY,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;;AAE9C,MAAI,MAAM,GAAG,OAAO,CAAC,UAAU,EAAE,UAAS,KAAK,EAAE,GAAG,EAAE,UAAU,EAAE;AAChE,WAAO,EAAE,UAAU,EAAE,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE,UAAU,CAAC,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;GAC3F,CAAC,CAAC;AACH,SAAO,UAAU,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;CAC7C;;AAED,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC","file":"sortBy-compiled.js","sourcesContent":["var baseCallback = require('../internal/baseCallback'),\n    baseMap = require('../internal/baseMap'),\n    baseSortBy = require('../internal/baseSortBy'),\n    compareAscending = require('../internal/compareAscending'),\n    isIterateeCall = require('../internal/isIterateeCall');\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection through `iteratee`. This method performs\n * a stable sort, that is, it preserves the original sort order of equal elements.\n * The `iteratee` is bound to `thisArg` and invoked with three arguments:\n * (value, index|key, collection).\n *\n * If a property name is provided for `iteratee` the created `_.property`\n * style callback returns the property value of the given element.\n *\n * If a value is also provided for `thisArg` the created `_.matchesProperty`\n * style callback returns `true` for elements that have a matching property\n * value, else `false`.\n *\n * If an object is provided for `iteratee` the created `_.matches` style\n * callback returns `true` for elements that have the properties of the given\n * object, else `false`.\n *\n * @static\n * @memberOf _\n * @category Collection\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n *  per iteration.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * _.sortBy([1, 2, 3], function(n) {\n *   return Math.sin(n);\n * });\n * // => [3, 1, 2]\n *\n * _.sortBy([1, 2, 3], function(n) {\n *   return this.sin(n);\n * }, Math);\n * // => [3, 1, 2]\n *\n * var users = [\n *   { 'user': 'fred' },\n *   { 'user': 'pebbles' },\n *   { 'user': 'barney' }\n * ];\n *\n * // using the `_.property` callback shorthand\n * _.pluck(_.sortBy(users, 'user'), 'user');\n * // => ['barney', 'fred', 'pebbles']\n */\nfunction sortBy(collection, iteratee, thisArg) {\n  if (collection == null) {\n    return [];\n  }\n  if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {\n    iteratee = undefined;\n  }\n  var index = -1;\n  iteratee = baseCallback(iteratee, thisArg, 3);\n\n  var result = baseMap(collection, function(value, key, collection) {\n    return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };\n  });\n  return baseSortBy(result, compareAscending);\n}\n\nmodule.exports = sortBy;\n"]}