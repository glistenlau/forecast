{"version":3,"sources":["attempt.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC;IACpC,SAAS,GAAG,OAAO,CAAC,uBAAuB,CAAC;;;;;;;;;;;;;;;;;;;;;;AAAC,AAsBjD,IAAI,OAAO,GAAG,SAAS,CAAC,UAAS,IAAI,EAAE,IAAI,EAAE;AAC3C,MAAI;AACF,WAAO,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;GACpC,CAAC,OAAM,CAAC,EAAE;AACT,WAAO,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;GACtC;CACF,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"attempt-compiled.js","sourcesContent":["var isError = require('../lang/isError'),\n    restParam = require('../function/restParam');\n\n/**\n * Attempts to invoke `func`, returning either the result or the caught error\n * object. Any additional arguments are provided to `func` when it's invoked.\n *\n * @static\n * @memberOf _\n * @category Utility\n * @param {Function} func The function to attempt.\n * @returns {*} Returns the `func` result or error object.\n * @example\n *\n * // avoid throwing errors for invalid selectors\n * var elements = _.attempt(function(selector) {\n *   return document.querySelectorAll(selector);\n * }, '>_>');\n *\n * if (_.isError(elements)) {\n *   elements = [];\n * }\n */\nvar attempt = restParam(function(func, args) {\n  try {\n    return func.apply(undefined, args);\n  } catch(e) {\n    return isError(e) ? e : new Error(e);\n  }\n});\n\nmodule.exports = attempt;\n"]}