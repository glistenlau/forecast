{"version":3,"sources":["wrapperConcat.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,GAAG,OAAO,CAAC,yBAAyB,CAAC;IAChD,WAAW,GAAG,OAAO,CAAC,yBAAyB,CAAC;IAChD,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC;IACpC,SAAS,GAAG,OAAO,CAAC,uBAAuB,CAAC;IAC5C,QAAQ,GAAG,OAAO,CAAC,sBAAsB,CAAC;;;;;;;;;;;;;;;;;;;;;;AAAC,AAsB/C,IAAI,aAAa,GAAG,SAAS,CAAC,UAAS,MAAM,EAAE;AAC7C,QAAM,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;AAC7B,SAAO,IAAI,CAAC,IAAI,CAAC,UAAS,KAAK,EAAE;AAC/B,WAAO,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;GACxE,CAAC,CAAC;CACJ,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,aAAa,CAAC","file":"wrapperConcat-compiled.js","sourcesContent":["var arrayConcat = require('../internal/arrayConcat'),\n    baseFlatten = require('../internal/baseFlatten'),\n    isArray = require('../lang/isArray'),\n    restParam = require('../function/restParam'),\n    toObject = require('../internal/toObject');\n\n/**\n * Creates a new array joining a wrapped array with any additional arrays\n * and/or values.\n *\n * @name concat\n * @memberOf _\n * @category Chain\n * @param {...*} [values] The values to concatenate.\n * @returns {Array} Returns the new concatenated array.\n * @example\n *\n * var array = [1];\n * var wrapped = _(array).concat(2, [3], [[4]]);\n *\n * console.log(wrapped.value());\n * // => [1, 2, 3, [4]]\n *\n * console.log(array);\n * // => [1]\n */\nvar wrapperConcat = restParam(function(values) {\n  values = baseFlatten(values);\n  return this.thru(function(array) {\n    return arrayConcat(isArray(array) ? array : [toObject(array)], values);\n  });\n});\n\nmodule.exports = wrapperConcat;\n"]}