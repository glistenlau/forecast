{"version":3,"sources":["wrapperPlant.js"],"names":[],"mappings":"AAAA,IAAI,UAAU,GAAG,OAAO,CAAC,wBAAwB,CAAC;IAC9C,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AAyBvD,SAAS,YAAY,CAAC,KAAK,EAAE;AAC3B,MAAI,MAAM;MACN,MAAM,GAAG,IAAI,CAAC;;AAElB,SAAO,MAAM,YAAY,UAAU,EAAE;AACnC,QAAI,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;AACjC,QAAI,MAAM,EAAE;AACV,cAAQ,CAAC,WAAW,GAAG,KAAK,CAAC;KAC9B,MAAM;AACL,YAAM,GAAG,KAAK,CAAC;KAChB;AACD,QAAI,QAAQ,GAAG,KAAK,CAAC;AACrB,UAAM,GAAG,MAAM,CAAC,WAAW,CAAC;GAC7B;AACD,UAAQ,CAAC,WAAW,GAAG,KAAK,CAAC;AAC7B,SAAO,MAAM,CAAC;CACf;;AAED,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC","file":"wrapperPlant-compiled.js","sourcesContent":["var baseLodash = require('../internal/baseLodash'),\n    wrapperClone = require('../internal/wrapperClone');\n\n/**\n * Creates a clone of the chained sequence planting `value` as the wrapped value.\n *\n * @name plant\n * @memberOf _\n * @category Chain\n * @returns {Object} Returns the new `lodash` wrapper instance.\n * @example\n *\n * var array = [1, 2];\n * var wrapped = _(array).map(function(value) {\n *   return Math.pow(value, 2);\n * });\n *\n * var other = [3, 4];\n * var otherWrapped = wrapped.plant(other);\n *\n * otherWrapped.value();\n * // => [9, 16]\n *\n * wrapped.value();\n * // => [1, 4]\n */\nfunction wrapperPlant(value) {\n  var result,\n      parent = this;\n\n  while (parent instanceof baseLodash) {\n    var clone = wrapperClone(parent);\n    if (result) {\n      previous.__wrapped__ = clone;\n    } else {\n      result = clone;\n    }\n    var previous = clone;\n    parent = parent.__wrapped__;\n  }\n  previous.__wrapped__ = value;\n  return result;\n}\n\nmodule.exports = wrapperPlant;\n"]}