{"version":3,"sources":["isPlainObject.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,GAAG,OAAO,CAAC,uBAAuB,CAAC;IAC5C,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC;IACtC,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC;;;AAAC,AAGvD,IAAI,SAAS,GAAG,iBAAiB;;;AAAC,AAGlC,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS;;;AAAC,AAGnC,IAAI,cAAc,GAAG,WAAW,CAAC,cAAc;;;;;;AAAC,AAMhD,IAAI,WAAW,GAAG,WAAW,CAAC,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AAgCvC,SAAS,aAAa,CAAC,KAAK,EAAE;AAC5B,MAAI,IAAI;;;AAAC,AAGT,MAAI,EAAE,YAAY,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,SAAS,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA,AAAC,IACpF,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,aAAa,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,WAAW,EAAE,OAAO,IAAI,IAAI,UAAU,IAAI,EAAE,IAAI,YAAY,IAAI,CAAA,AAAC,CAAA,AAAC,AAAC,EAAE;AACpI,WAAO,KAAK,CAAC;GACd;;;;AAAA,AAID,MAAI,MAAM;;;;AAAC,AAIX,WAAS,CAAC,KAAK,EAAE,UAAS,QAAQ,EAAE,GAAG,EAAE;AACvC,UAAM,GAAG,GAAG,CAAC;GACd,CAAC,CAAC;AACH,SAAO,MAAM,KAAK,SAAS,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;CACnE;;AAED,MAAM,CAAC,OAAO,GAAG,aAAa,CAAC","file":"isPlainObject-compiled.js","sourcesContent":["var baseForIn = require('../internal/baseForIn'),\n    isArguments = require('./isArguments'),\n    isObjectLike = require('../internal/isObjectLike');\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * **Note:** This method assumes objects created by the `Object` constructor\n * have no inherited enumerable properties.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  var Ctor;\n\n  // Exit early for non `Object` objects.\n  if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||\n      (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {\n    return false;\n  }\n  // IE < 9 iterates inherited properties before own properties. If the first\n  // iterated property is an object's own property then there are no inherited\n  // enumerable properties.\n  var result;\n  // In most environments an object's own properties are iterated before\n  // its inherited properties. If the last iterated property is an object's\n  // own property then there are no inherited enumerable properties.\n  baseForIn(value, function(subValue, key) {\n    result = key;\n  });\n  return result === undefined || hasOwnProperty.call(value, result);\n}\n\nmodule.exports = isPlainObject;\n"]}