{"version":3,"sources":["isFinite.js"],"names":[],"mappings":";AACA,IAAI,cAAc,GAAG,MAAM,CAAC,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AA6BrC,SAAS,QAAQ,CAAC,KAAK,EAAE;AACvB,SAAO,OAAO,KAAK,IAAI,QAAQ,IAAI,cAAc,CAAC,KAAK,CAAC,CAAC;CAC1D;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC","file":"isFinite-compiled.js","sourcesContent":["/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = global.isFinite;\n\n/**\n * Checks if `value` is a finite primitive number.\n *\n * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n * @example\n *\n * _.isFinite(10);\n * // => true\n *\n * _.isFinite('10');\n * // => false\n *\n * _.isFinite(true);\n * // => false\n *\n * _.isFinite(Object(10));\n * // => false\n *\n * _.isFinite(Infinity);\n * // => false\n */\nfunction isFinite(value) {\n  return typeof value == 'number' && nativeIsFinite(value);\n}\n\nmodule.exports = isFinite;\n"]}