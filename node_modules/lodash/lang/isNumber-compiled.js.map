{"version":3,"sources":["isNumber.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC;;;AAAC,AAGvD,IAAI,SAAS,GAAG,iBAAiB;;;AAAC,AAGlC,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS;;;;;;AAAC,AAMnC,IAAI,WAAW,GAAG,WAAW,CAAC,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AAwBvC,SAAS,QAAQ,CAAC,KAAK,EAAE;AACvB,SAAO,OAAO,KAAK,IAAI,QAAQ,IAAK,YAAY,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,SAAS,AAAC,CAAC;CAClG;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC","file":"isNumber-compiled.js","sourcesContent":["var isObjectLike = require('../internal/isObjectLike');\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified\n * as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isNumber(8.4);\n * // => true\n *\n * _.isNumber(NaN);\n * // => true\n *\n * _.isNumber('8.4');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n"]}