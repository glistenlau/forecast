{"version":3,"sources":["isString.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC;;;AAAC,AAGvD,IAAI,SAAS,GAAG,iBAAiB;;;AAAC,AAGlC,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS;;;;;;AAAC,AAMnC,IAAI,WAAW,GAAG,WAAW,CAAC,QAAQ;;;;;;;;;;;;;;;;;;AAAC,AAkBvC,SAAS,QAAQ,CAAC,KAAK,EAAE;AACvB,SAAO,OAAO,KAAK,IAAI,QAAQ,IAAK,YAAY,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,SAAS,AAAC,CAAC;CAClG;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC","file":"isString-compiled.js","sourcesContent":["var isObjectLike = require('../internal/isObjectLike');\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);\n}\n\nmodule.exports = isString;\n"]}