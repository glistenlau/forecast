{"version":3,"sources":["isError.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC;;;AAAC,AAGvD,IAAI,QAAQ,GAAG,gBAAgB;;;AAAC,AAGhC,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS;;;;;;AAAC,AAMnC,IAAI,WAAW,GAAG,WAAW,CAAC,QAAQ;;;;;;;;;;;;;;;;;;;AAAC,AAmBvC,SAAS,OAAO,CAAC,KAAK,EAAE;AACtB,SAAO,YAAY,CAAC,KAAK,CAAC,IAAI,OAAO,KAAK,CAAC,OAAO,IAAI,QAAQ,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC;CACvG;;AAED,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"isError-compiled.js","sourcesContent":["var isObjectLike = require('../internal/isObjectLike');\n\n/** `Object#toString` result references. */\nvar errorTag = '[object Error]';\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/**\n * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n * `SyntaxError`, `TypeError`, or `URIError` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n * @example\n *\n * _.isError(new Error);\n * // => true\n *\n * _.isError(Error);\n * // => false\n */\nfunction isError(value) {\n  return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;\n}\n\nmodule.exports = isError;\n"]}