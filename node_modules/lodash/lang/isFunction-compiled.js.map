{"version":3,"sources":["isFunction.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC;;;AAAC,AAGrC,IAAI,OAAO,GAAG,mBAAmB;;;AAAC,AAGlC,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS;;;;;;AAAC,AAMnC,IAAI,WAAW,GAAG,WAAW,CAAC,QAAQ;;;;;;;;;;;;;;;;;;AAAC,AAkBvC,SAAS,UAAU,CAAC,KAAK,EAAE;;;;AAIzB,SAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC;CAC9D;;AAED,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC","file":"isFunction-compiled.js","sourcesContent":["var isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]';\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in older versions of Chrome and Safari which return 'function' for regexes\n  // and Safari 8 which returns 'object' for typed array constructors.\n  return isObject(value) && objToString.call(value) == funcTag;\n}\n\nmodule.exports = isFunction;\n"]}