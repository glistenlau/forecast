{"version":3,"sources":["words.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC;IAClD,cAAc,GAAG,OAAO,CAAC,4BAA4B,CAAC;;;AAAC,AAG3D,IAAI,OAAO,GAAI,CAAA,YAAW;AACxB,MAAI,KAAK,GAAG,6BAA6B;MACrC,KAAK,GAAG,8BAA8B,CAAC;;AAE3C,SAAO,MAAM,CAAC,KAAK,GAAG,MAAM,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI,GAAG,KAAK,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,KAAK,GAAG,UAAU,EAAE,GAAG,CAAC,CAAC;CAC5G,CAAA,EAAE,AAAC;;;;;;;;;;;;;;;;;;;;AAAC,AAoBL,SAAS,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE;AACrC,MAAI,KAAK,IAAI,cAAc,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,CAAC,EAAE;AACnD,WAAO,GAAG,SAAS,CAAC;GACrB;AACD,QAAM,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;AAC9B,SAAO,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC;CAC/C;;AAED,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC","file":"words-compiled.js","sourcesContent":["var baseToString = require('../internal/baseToString'),\n    isIterateeCall = require('../internal/isIterateeCall');\n\n/** Used to match words to create compound words. */\nvar reWords = (function() {\n  var upper = '[A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde]',\n      lower = '[a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff]+';\n\n  return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');\n}());\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  if (guard && isIterateeCall(string, pattern, guard)) {\n    pattern = undefined;\n  }\n  string = baseToString(string);\n  return string.match(pattern || reWords) || [];\n}\n\nmodule.exports = words;\n"]}