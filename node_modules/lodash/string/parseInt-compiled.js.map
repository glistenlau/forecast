{"version":3,"sources":["parseInt.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,GAAG,OAAO,CAAC,4BAA4B,CAAC;IACtD,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC;;;AAAC,AAG7B,IAAI,cAAc,GAAG,QAAQ;;;AAAC,AAG9B,IAAI,cAAc,GAAG,MAAM,CAAC,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AAyBrC,SAAS,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE;;;;AAItC,MAAI,KAAK,GAAG,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,GAAG,KAAK,IAAI,IAAI,EAAE;AAChE,SAAK,GAAG,CAAC,CAAC;GACX,MAAM,IAAI,KAAK,EAAE;AAChB,SAAK,GAAG,CAAC,KAAK,CAAC;GAChB;AACD,QAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;AACtB,SAAO,cAAc,CAAC,MAAM,EAAE,KAAK,KAAK,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,CAAA,AAAC,CAAC,CAAC;CACjF;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC","file":"parseInt-compiled.js","sourcesContent":["var isIterateeCall = require('../internal/isIterateeCall'),\n    trim = require('./trim');\n\n/** Used to detect hexadecimal string values. */\nvar reHasHexPrefix = /^0[xX]/;\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeParseInt = global.parseInt;\n\n/**\n * Converts `string` to an integer of the specified radix. If `radix` is\n * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,\n * in which case a `radix` of `16` is used.\n *\n * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)\n * of `parseInt`.\n *\n * @static\n * @memberOf _\n * @category String\n * @param {string} string The string to convert.\n * @param {number} [radix] The radix to interpret `value` by.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.parseInt('08');\n * // => 8\n *\n * _.map(['6', '08', '10'], _.parseInt);\n * // => [6, 8, 10]\n */\nfunction parseInt(string, radix, guard) {\n  // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.\n  // Chrome fails to trim leading <BOM> whitespace characters.\n  // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.\n  if (guard ? isIterateeCall(string, radix, guard) : radix == null) {\n    radix = 0;\n  } else if (radix) {\n    radix = +radix;\n  }\n  string = trim(string);\n  return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));\n}\n\nmodule.exports = parseInt;\n"]}