{"version":3,"sources":["unescape.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC;IAClD,gBAAgB,GAAG,OAAO,CAAC,8BAA8B,CAAC;;;AAAC,AAG/D,IAAI,aAAa,GAAG,+BAA+B;IAC/C,gBAAgB,GAAG,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;AAAC,AAoBpD,SAAS,QAAQ,CAAC,MAAM,EAAE;AACxB,UAAM,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;AAC9B,WAAO,AAAC,MAAM,IAAI,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,GAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAC/C,MAAM,CAAC;CACZ;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC","file":"unescape-compiled.js","sourcesContent":["var baseToString = require('../internal/baseToString'),\n    unescapeHtmlChar = require('../internal/unescapeHtmlChar');\n\n/** Used to match HTML entities and HTML characters. */\nvar reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,\n    reHasEscapedHtml = RegExp(reEscapedHtml.source);\n\n/**\n * The inverse of `_.escape`; this method converts the HTML entities\n * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their\n * corresponding characters.\n *\n * **Note:** No other HTML entities are unescaped. To unescape additional HTML\n * entities use a third-party library like [_he_](https://mths.be/he).\n *\n * @static\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to unescape.\n * @returns {string} Returns the unescaped string.\n * @example\n *\n * _.unescape('fred, barney, &amp; pebbles');\n * // => 'fred, barney, & pebbles'\n */\nfunction unescape(string) {\n  string = baseToString(string);\n  return (string && reHasEscapedHtml.test(string))\n    ? string.replace(reEscapedHtml, unescapeHtmlChar)\n    : string;\n}\n\nmodule.exports = unescape;\n"]}