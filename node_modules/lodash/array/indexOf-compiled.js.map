{"version":3,"sources":["indexOf.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,GAAG,OAAO,CAAC,yBAAyB,CAAC;IAChD,WAAW,GAAG,OAAO,CAAC,yBAAyB,CAAC;;;AAAC,AAGrD,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AA8BzB,SAAS,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE;AACxC,MAAI,MAAM,GAAG,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AACtC,MAAI,CAAC,MAAM,EAAE;AACX,WAAO,CAAC,CAAC,CAAC;GACX;AACD,MAAI,OAAO,SAAS,IAAI,QAAQ,EAAE;AAChC,aAAS,GAAG,SAAS,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,SAAS,EAAE,CAAC,CAAC,GAAG,SAAS,CAAC;GAC1E,MAAM,IAAI,SAAS,EAAE;AACpB,QAAI,KAAK,GAAG,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACtC,QAAI,KAAK,GAAG,MAAM,KACb,KAAK,KAAK,KAAK,GAAI,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC,GAAK,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,CAAC,CAAC,AAAC,EAAE;AAClF,aAAO,KAAK,CAAC;KACd;AACD,WAAO,CAAC,CAAC,CAAC;GACX;AACD,SAAO,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,IAAI,CAAC,CAAC,CAAC;CAClD;;AAED,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"indexOf-compiled.js","sourcesContent":["var baseIndexOf = require('../internal/baseIndexOf'),\n    binaryIndex = require('../internal/binaryIndex');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the offset\n * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`\n * performs a faster binary search.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array to search.\n * @param {*} value The value to search for.\n * @param {boolean|number} [fromIndex=0] The index to search from or `true`\n *  to perform a binary search on a sorted array.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // using `fromIndex`\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n *\n * // performing a binary search\n * _.indexOf([1, 1, 2, 2], 2, true);\n * // => 2\n */\nfunction indexOf(array, value, fromIndex) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return -1;\n  }\n  if (typeof fromIndex == 'number') {\n    fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;\n  } else if (fromIndex) {\n    var index = binaryIndex(array, value);\n    if (index < length &&\n        (value === value ? (value === array[index]) : (array[index] !== array[index]))) {\n      return index;\n    }\n    return -1;\n  }\n  return baseIndexOf(array, value, fromIndex || 0);\n}\n\nmodule.exports = indexOf;\n"]}