{"version":3,"sources":["chunk.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,GAAG,OAAO,CAAC,uBAAuB,CAAC;IAC5C,cAAc,GAAG,OAAO,CAAC,4BAA4B,CAAC;;;AAAC,AAG3D,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI;IACtB,WAAW,GAAG,IAAI,CAAC,KAAK;IACxB,SAAS,GAAG,IAAI,CAAC,GAAG;;;;;;;;;;;;;;;;;;;;;;AAAC,AAsBzB,SAAS,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE;AACjC,MAAI,KAAK,GAAG,cAAc,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,GAAG,IAAI,IAAI,IAAI,EAAE;AAC7D,QAAI,GAAG,CAAC,CAAC;GACV,MAAM;AACL,QAAI,GAAG,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;GAC7C;AACD,MAAI,KAAK,GAAG,CAAC;MACT,MAAM,GAAG,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC;MACjC,QAAQ,GAAG,CAAC,CAAC;MACb,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;;AAE9C,SAAO,KAAK,GAAG,MAAM,EAAE;AACrB,UAAM,CAAC,EAAE,QAAQ,CAAC,GAAG,SAAS,CAAC,KAAK,EAAE,KAAK,EAAG,KAAK,IAAI,IAAI,CAAE,CAAC;GAC/D;AACD,SAAO,MAAM,CAAC;CACf;;AAED,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC","file":"chunk-compiled.js","sourcesContent":["var baseSlice = require('../internal/baseSlice'),\n    isIterateeCall = require('../internal/isIterateeCall');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeFloor = Math.floor,\n    nativeMax = Math.max;\n\n/**\n * Creates an array of elements split into groups the length of `size`.\n * If `collection` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {Array} Returns the new array containing chunks.\n * @example\n *\n * _.chunk(['a', 'b', 'c', 'd'], 2);\n * // => [['a', 'b'], ['c', 'd']]\n *\n * _.chunk(['a', 'b', 'c', 'd'], 3);\n * // => [['a', 'b', 'c'], ['d']]\n */\nfunction chunk(array, size, guard) {\n  if (guard ? isIterateeCall(array, size, guard) : size == null) {\n    size = 1;\n  } else {\n    size = nativeMax(nativeFloor(size) || 1, 1);\n  }\n  var index = 0,\n      length = array ? array.length : 0,\n      resIndex = -1,\n      result = Array(nativeCeil(length / size));\n\n  while (index < length) {\n    result[++resIndex] = baseSlice(array, index, (index += size));\n  }\n  return result;\n}\n\nmodule.exports = chunk;\n"]}