{"version":3,"sources":["slice.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,GAAG,OAAO,CAAC,uBAAuB,CAAC;IAC5C,cAAc,GAAG,OAAO,CAAC,4BAA4B,CAAC;;;;;;;;;;;;;;;;AAAC,AAgB3D,SAAS,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE;AAChC,MAAI,MAAM,GAAG,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AACtC,MAAI,CAAC,MAAM,EAAE;AACX,WAAO,EAAE,CAAC;GACX;AACD,MAAI,GAAG,IAAI,OAAO,GAAG,IAAI,QAAQ,IAAI,cAAc,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,EAAE;AACtE,SAAK,GAAG,CAAC,CAAC;AACV,OAAG,GAAG,MAAM,CAAC;GACd;AACD,SAAO,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;CACrC;;AAED,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC","file":"slice-compiled.js","sourcesContent":["var baseSlice = require('../internal/baseSlice'),\n    isIterateeCall = require('../internal/isIterateeCall');\n\n/**\n * Creates a slice of `array` from `start` up to, but not including, `end`.\n *\n * **Note:** This method is used instead of `Array#slice` to support node\n * lists in IE < 9 and to ensure dense arrays are returned.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction slice(array, start, end) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return [];\n  }\n  if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n    start = 0;\n    end = length;\n  }\n  return baseSlice(array, start, end);\n}\n\nmodule.exports = slice;\n"]}