{"version":3,"sources":["unzip.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,GAAG,OAAO,CAAC,yBAAyB,CAAC;IAChD,QAAQ,GAAG,OAAO,CAAC,sBAAsB,CAAC;IAC1C,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC;IAClD,WAAW,GAAG,OAAO,CAAC,yBAAyB,CAAC;;;AAAC,AAGrD,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG;;;;;;;;;;;;;;;;;;;;AAAC,AAoBzB,SAAS,KAAK,CAAC,KAAK,EAAE;AACpB,MAAI,EAAE,KAAK,IAAI,KAAK,CAAC,MAAM,CAAA,AAAC,EAAE;AAC5B,WAAO,EAAE,CAAC;GACX;AACD,MAAI,KAAK,GAAG,CAAC,CAAC;MACV,MAAM,GAAG,CAAC,CAAC;;AAEf,OAAK,GAAG,WAAW,CAAC,KAAK,EAAE,UAAS,KAAK,EAAE;AACzC,QAAI,WAAW,CAAC,KAAK,CAAC,EAAE;AACtB,YAAM,GAAG,SAAS,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACzC,aAAO,IAAI,CAAC;KACb;GACF,CAAC,CAAC;AACH,MAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;AAC3B,SAAO,EAAE,KAAK,GAAG,MAAM,EAAE;AACvB,UAAM,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;GACtD;AACD,SAAO,MAAM,CAAC;CACf;;AAED,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC","file":"unzip-compiled.js","sourcesContent":["var arrayFilter = require('../internal/arrayFilter'),\n    arrayMap = require('../internal/arrayMap'),\n    baseProperty = require('../internal/baseProperty'),\n    isArrayLike = require('../internal/isArrayLike');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.zip` except that it accepts an array of grouped\n * elements and creates an array regrouping the elements to their pre-zip\n * configuration.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @returns {Array} Returns the new array of regrouped elements.\n * @example\n *\n * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);\n * // => [['fred', 30, true], ['barney', 40, false]]\n *\n * _.unzip(zipped);\n * // => [['fred', 'barney'], [30, 40], [true, false]]\n */\nfunction unzip(array) {\n  if (!(array && array.length)) {\n    return [];\n  }\n  var index = -1,\n      length = 0;\n\n  array = arrayFilter(array, function(group) {\n    if (isArrayLike(group)) {\n      length = nativeMax(group.length, length);\n      return true;\n    }\n  });\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = arrayMap(array, baseProperty(index));\n  }\n  return result;\n}\n\nmodule.exports = unzip;\n"]}