{"version":3,"sources":["lastIndexOf.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,GAAG,OAAO,CAAC,yBAAyB,CAAC;IAChD,UAAU,GAAG,OAAO,CAAC,wBAAwB,CAAC;;;AAAC,AAGnD,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG;IACpB,SAAS,GAAG,IAAI,CAAC,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AA2BzB,SAAS,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE;AAC5C,MAAI,MAAM,GAAG,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AACtC,MAAI,CAAC,MAAM,EAAE;AACX,WAAO,CAAC,CAAC,CAAC;GACX;AACD,MAAI,KAAK,GAAG,MAAM,CAAC;AACnB,MAAI,OAAO,SAAS,IAAI,QAAQ,EAAE;AAChC,SAAK,GAAG,CAAC,SAAS,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,SAAS,EAAE,CAAC,CAAC,GAAG,SAAS,CAAC,SAAS,IAAI,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,CAAA,GAAI,CAAC,CAAC;GACxG,MAAM,IAAI,SAAS,EAAE;AACpB,SAAK,GAAG,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;AAC5C,QAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;AACzB,QAAI,KAAK,KAAK,KAAK,GAAI,KAAK,KAAK,KAAK,GAAK,KAAK,KAAK,KAAK,AAAC,EAAE;AAC3D,aAAO,KAAK,CAAC;KACd;AACD,WAAO,CAAC,CAAC,CAAC;GACX;AACD,MAAI,KAAK,KAAK,KAAK,EAAE;AACnB,WAAO,UAAU,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;GACvC;AACD,SAAO,KAAK,EAAE,EAAE;AACd,QAAI,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,EAAE;AAC1B,aAAO,KAAK,CAAC;KACd;GACF;AACD,SAAO,CAAC,CAAC,CAAC;CACX;;AAED,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC","file":"lastIndexOf-compiled.js","sourcesContent":["var binaryIndex = require('../internal/binaryIndex'),\n    indexOfNaN = require('../internal/indexOfNaN');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * This method is like `_.indexOf` except that it iterates over elements of\n * `array` from right to left.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array to search.\n * @param {*} value The value to search for.\n * @param {boolean|number} [fromIndex=array.length-1] The index to search from\n *  or `true` to perform a binary search on a sorted array.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.lastIndexOf([1, 2, 1, 2], 2);\n * // => 3\n *\n * // using `fromIndex`\n * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n * // => 1\n *\n * // performing a binary search\n * _.lastIndexOf([1, 1, 2, 2], 2, true);\n * // => 3\n */\nfunction lastIndexOf(array, value, fromIndex) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return -1;\n  }\n  var index = length;\n  if (typeof fromIndex == 'number') {\n    index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;\n  } else if (fromIndex) {\n    index = binaryIndex(array, value, true) - 1;\n    var other = array[index];\n    if (value === value ? (value === other) : (other !== other)) {\n      return index;\n    }\n    return -1;\n  }\n  if (value !== value) {\n    return indexOfNaN(array, index, true);\n  }\n  while (index--) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = lastIndexOf;\n"]}