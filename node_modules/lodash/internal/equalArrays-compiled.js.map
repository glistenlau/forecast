{"version":3,"sources":["equalArrays.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC;;;;;;;;;;;;;;;;AAAC,AAgBvC,SAAS,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE;AACjF,MAAI,KAAK,GAAG,CAAC,CAAC;MACV,SAAS,GAAG,KAAK,CAAC,MAAM;MACxB,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC;;AAE7B,MAAI,SAAS,IAAI,SAAS,IAAI,EAAE,OAAO,IAAI,SAAS,GAAG,SAAS,CAAA,AAAC,EAAE;AACjE,WAAO,KAAK,CAAC;GACd;;AAAA,AAED,SAAO,EAAE,KAAK,GAAG,SAAS,EAAE;AAC1B,QAAI,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC;QACvB,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC;QACvB,MAAM,GAAG,UAAU,GAAG,UAAU,CAAC,OAAO,GAAG,QAAQ,GAAG,QAAQ,EAAE,OAAO,GAAG,QAAQ,GAAG,QAAQ,EAAE,KAAK,CAAC,GAAG,SAAS,CAAC;;AAEtH,QAAI,MAAM,KAAK,SAAS,EAAE;AACxB,UAAI,MAAM,EAAE;AACV,iBAAS;OACV;AACD,aAAO,KAAK,CAAC;KACd;;AAAA,AAED,QAAI,OAAO,EAAE;AACX,UAAI,CAAC,SAAS,CAAC,KAAK,EAAE,UAAS,QAAQ,EAAE;AACnC,eAAO,QAAQ,KAAK,QAAQ,IAAI,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;OACpG,CAAC,EAAE;AACN,eAAO,KAAK,CAAC;OACd;KACF,MAAM,IAAI,EAAE,QAAQ,KAAK,QAAQ,IAAI,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAA,AAAC,EAAE;AACzG,aAAO,KAAK,CAAC;KACd;GACF;AACD,SAAO,IAAI,CAAC;CACb;;AAED,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC","file":"equalArrays-compiled.js","sourcesContent":["var arraySome = require('./arraySome');\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparing arrays.\n * @param {boolean} [isLoose] Specify performing partial comparisons.\n * @param {Array} [stackA] Tracks traversed `value` objects.\n * @param {Array} [stackB] Tracks traversed `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {\n  var index = -1,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {\n    return false;\n  }\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index],\n        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;\n\n    if (result !== undefined) {\n      if (result) {\n        continue;\n      }\n      return false;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (isLoose) {\n      if (!arraySome(other, function(othValue) {\n            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);\n          })) {\n        return false;\n      }\n    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = equalArrays;\n"]}