{"version":3,"sources":["baseIsEqual.js"],"names":[],"mappings":"AAAA,IAAI,eAAe,GAAG,OAAO,CAAC,mBAAmB,CAAC;IAC9C,QAAQ,GAAG,OAAO,CAAC,kBAAkB,CAAC;IACtC,YAAY,GAAG,OAAO,CAAC,gBAAgB,CAAC;;;;;;;;;;;;;;;AAAC,AAe7C,SAAS,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE;AACtE,MAAI,KAAK,KAAK,KAAK,EAAE;AACnB,WAAO,IAAI,CAAC;GACb;AACD,MAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,AAAC,EAAE;AAChF,WAAO,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK,CAAC;GAC3C;AACD,SAAO,eAAe,CAAC,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;CACxF;;AAED,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC","file":"baseIsEqual-compiled.js","sourcesContent":["var baseIsEqualDeep = require('./baseIsEqualDeep'),\n    isObject = require('../lang/isObject'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * The base implementation of `_.isEqual` without support for `this` binding\n * `customizer` functions.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparing values.\n * @param {boolean} [isLoose] Specify performing partial comparisons.\n * @param {Array} [stackA] Tracks traversed `value` objects.\n * @param {Array} [stackB] Tracks traversed `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);\n}\n\nmodule.exports = baseIsEqual;\n"]}