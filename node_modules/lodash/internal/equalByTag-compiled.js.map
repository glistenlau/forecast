{"version":3,"sources":["equalByTag.js"],"names":[],"mappings":";AACA,IAAI,OAAO,GAAG,kBAAkB;IAC5B,OAAO,GAAG,eAAe;IACzB,QAAQ,GAAG,gBAAgB;IAC3B,SAAS,GAAG,iBAAiB;IAC7B,SAAS,GAAG,iBAAiB;IAC7B,SAAS,GAAG,iBAAiB;;;;;;;;;;;;;;;AAAC,AAelC,SAAS,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE;AACtC,UAAQ,GAAG;AACT,SAAK,OAAO,CAAC;AACb,SAAK,OAAO;;;AAGV,aAAO,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC;;AAAA,AAE3B,SAAK,QAAQ;AACX,aAAO,MAAM,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC;;AAAA,AAEtE,SAAK,SAAS;;AAEZ,aAAO,AAAC,MAAM,IAAI,CAAC,MAAM,GACrB,KAAK,IAAI,CAAC,KAAK,GACf,MAAM,IAAI,CAAC,KAAK,CAAC;;AAAA,AAEvB,SAAK,SAAS,CAAC;AACf,SAAK,SAAS;;;AAGZ,aAAO,MAAM,IAAK,KAAK,GAAG,EAAE,AAAC,CAAC;AAAA,GACjC;AACD,SAAO,KAAK,CAAC;CACd;;AAED,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC","file":"equalByTag-compiled.js","sourcesContent":["/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    stringTag = '[object String]';\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag) {\n  switch (tag) {\n    case boolTag:\n    case dateTag:\n      // Coerce dates and booleans to numbers, dates to milliseconds and booleans\n      // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.\n      return +object == +other;\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case numberTag:\n      // Treat `NaN` vs. `NaN` as equal.\n      return (object != +object)\n        ? other != +other\n        : object == +other;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings primitives and string\n      // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.\n      return object == (other + '');\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n"]}