{"version":3,"sources":["baseCompareAscending.js"],"names":[],"mappings":";;;;;;;;;AASA,SAAS,oBAAoB,CAAC,KAAK,EAAE,KAAK,EAAE;AAC1C,MAAI,KAAK,KAAK,KAAK,EAAE;AACnB,QAAI,SAAS,GAAG,KAAK,KAAK,IAAI;QAC1B,UAAU,GAAG,KAAK,KAAK,SAAS;QAChC,cAAc,GAAG,KAAK,KAAK,KAAK,CAAC;;AAErC,QAAI,SAAS,GAAG,KAAK,KAAK,IAAI;QAC1B,UAAU,GAAG,KAAK,KAAK,SAAS;QAChC,cAAc,GAAG,KAAK,KAAK,KAAK,CAAC;;AAErC,QAAI,AAAC,KAAK,GAAG,KAAK,IAAI,CAAC,SAAS,IAAK,CAAC,cAAc,IAC/C,SAAS,IAAI,CAAC,UAAU,IAAI,cAAc,AAAC,IAC3C,UAAU,IAAI,cAAc,AAAC,EAAE;AAClC,aAAO,CAAC,CAAC;KACV;AACD,QAAI,AAAC,KAAK,GAAG,KAAK,IAAI,CAAC,SAAS,IAAK,CAAC,cAAc,IAC/C,SAAS,IAAI,CAAC,UAAU,IAAI,cAAc,AAAC,IAC3C,UAAU,IAAI,cAAc,AAAC,EAAE;AAClC,aAAO,CAAC,CAAC,CAAC;KACX;GACF;AACD,SAAO,CAAC,CAAC;CACV;;AAED,MAAM,CAAC,OAAO,GAAG,oBAAoB,CAAC","file":"baseCompareAscending-compiled.js","sourcesContent":["/**\n * The base implementation of `compareAscending` which compares values and\n * sorts them in ascending order without guaranteeing a stable sort.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction baseCompareAscending(value, other) {\n  if (value !== other) {\n    var valIsNull = value === null,\n        valIsUndef = value === undefined,\n        valIsReflexive = value === value;\n\n    var othIsNull = other === null,\n        othIsUndef = other === undefined,\n        othIsReflexive = other === other;\n\n    if ((value > other && !othIsNull) || !valIsReflexive ||\n        (valIsNull && !othIsUndef && othIsReflexive) ||\n        (valIsUndef && othIsReflexive)) {\n      return 1;\n    }\n    if ((value < other && !valIsNull) || !othIsReflexive ||\n        (othIsNull && !valIsUndef && valIsReflexive) ||\n        (othIsUndef && valIsReflexive)) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = baseCompareAscending;\n"]}