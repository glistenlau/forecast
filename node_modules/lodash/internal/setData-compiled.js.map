{"version":3,"sources":["setData.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC;IACtC,GAAG,GAAG,OAAO,CAAC,aAAa,CAAC;;;AAAC,AAGjC,IAAI,SAAS,GAAG,GAAG;IACf,QAAQ,GAAG,EAAE;;;;;;;;;;;;;;;AAAC,AAelB,IAAI,OAAO,GAAI,CAAA,YAAW;AACxB,MAAI,KAAK,GAAG,CAAC;MACT,UAAU,GAAG,CAAC,CAAC;;AAEnB,SAAO,UAAS,GAAG,EAAE,KAAK,EAAE;AAC1B,QAAI,KAAK,GAAG,GAAG,EAAE;QACb,SAAS,GAAG,QAAQ,IAAI,KAAK,GAAG,UAAU,CAAA,AAAC,CAAC;;AAEhD,cAAU,GAAG,KAAK,CAAC;AACnB,QAAI,SAAS,GAAG,CAAC,EAAE;AACjB,UAAI,EAAE,KAAK,IAAI,SAAS,EAAE;AACxB,eAAO,GAAG,CAAC;OACZ;KACF,MAAM;AACL,WAAK,GAAG,CAAC,CAAC;KACX;AACD,WAAO,WAAW,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;GAChC,CAAC;CACH,CAAA,EAAE,AAAC,CAAC;;AAEL,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"setData-compiled.js","sourcesContent":["var baseSetData = require('./baseSetData'),\n    now = require('../date/now');\n\n/** Used to detect when a function becomes hot. */\nvar HOT_COUNT = 150,\n    HOT_SPAN = 16;\n\n/**\n * Sets metadata for `func`.\n *\n * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n * period of time, it will trip its breaker and transition to an identity function\n * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)\n * for more details.\n *\n * @private\n * @param {Function} func The function to associate metadata with.\n * @param {*} data The metadata.\n * @returns {Function} Returns `func`.\n */\nvar setData = (function() {\n  var count = 0,\n      lastCalled = 0;\n\n  return function(key, value) {\n    var stamp = now(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return key;\n      }\n    } else {\n      count = 0;\n    }\n    return baseSetData(key, value);\n  };\n}());\n\nmodule.exports = setData;\n"]}