{"version":3,"sources":["binaryIndex.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,GAAG,OAAO,CAAC,iBAAiB,CAAC;IAC1C,QAAQ,GAAG,OAAO,CAAC,qBAAqB,CAAC;;;AAAC,AAG9C,IAAI,gBAAgB,GAAG,UAAU;IAC7B,qBAAqB,GAAG,gBAAgB,KAAK,CAAC;;;;;;;;;;;;;AAAC,AAanD,SAAS,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE;AAC7C,MAAI,GAAG,GAAG,CAAC;MACP,IAAI,GAAG,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC;;AAEtC,MAAI,OAAO,KAAK,IAAI,QAAQ,IAAI,KAAK,KAAK,KAAK,IAAI,IAAI,IAAI,qBAAqB,EAAE;AAChF,WAAO,GAAG,GAAG,IAAI,EAAE;AACjB,UAAI,GAAG,GAAG,AAAC,GAAG,GAAG,IAAI,KAAM,CAAC;UACxB,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;;AAE1B,UAAI,CAAC,UAAU,GAAI,QAAQ,IAAI,KAAK,GAAK,QAAQ,GAAG,KAAK,CAAC,IAAK,QAAQ,KAAK,IAAI,EAAE;AAChF,WAAG,GAAG,GAAG,GAAG,CAAC,CAAC;OACf,MAAM;AACL,YAAI,GAAG,GAAG,CAAC;OACZ;KACF;AACD,WAAO,IAAI,CAAC;GACb;AACD,SAAO,aAAa,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;CAC1D;;AAED,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC","file":"binaryIndex-compiled.js","sourcesContent":["var binaryIndexBy = require('./binaryIndexBy'),\n    identity = require('../utility/identity');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295,\n    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n/**\n * Performs a binary search of `array` to determine the index at which `value`\n * should be inserted into `array` in order to maintain its sort order.\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n */\nfunction binaryIndex(array, value, retHighest) {\n  var low = 0,\n      high = array ? array.length : low;\n\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n    while (low < high) {\n      var mid = (low + high) >>> 1,\n          computed = array[mid];\n\n      if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return high;\n  }\n  return binaryIndexBy(array, value, identity, retHighest);\n}\n\nmodule.exports = binaryIndex;\n"]}