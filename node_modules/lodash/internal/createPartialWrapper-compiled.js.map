{"version":3,"sources":["createPartialWrapper.js"],"names":[],"mappings":"AAAA,IAAI,iBAAiB,GAAG,OAAO,CAAC,qBAAqB,CAAC;;;AAAC,AAGvD,IAAI,SAAS,GAAG,CAAC;;;;;;;;;;;;;;AAAC,AAclB,SAAS,oBAAoB,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE;AAC9D,MAAI,MAAM,GAAG,OAAO,GAAG,SAAS;MAC5B,IAAI,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;;AAEnC,WAAS,OAAO,GAAG;;;AAGjB,QAAI,SAAS,GAAG,CAAC,CAAC;QACd,UAAU,GAAG,SAAS,CAAC,MAAM;QAC7B,SAAS,GAAG,CAAC,CAAC;QACd,UAAU,GAAG,QAAQ,CAAC,MAAM;QAC5B,IAAI,GAAG,KAAK,CAAC,UAAU,GAAG,UAAU,CAAC,CAAC;;AAE1C,WAAO,EAAE,SAAS,GAAG,UAAU,EAAE;AAC/B,UAAI,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;KACvC;AACD,WAAO,UAAU,EAAE,EAAE;AACnB,UAAI,CAAC,SAAS,EAAE,CAAC,GAAG,SAAS,CAAC,EAAE,SAAS,CAAC,CAAC;KAC5C;AACD,QAAI,EAAE,GAAG,AAAC,IAAI,IAAI,IAAI,KAAK,MAAM,IAAI,IAAI,YAAY,OAAO,GAAI,IAAI,GAAG,IAAI,CAAC;AAC5E,WAAO,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,OAAO,GAAG,IAAI,EAAE,IAAI,CAAC,CAAC;GAChD;AACD,SAAO,OAAO,CAAC;CAChB;;AAED,MAAM,CAAC,OAAO,GAAG,oBAAoB,CAAC","file":"createPartialWrapper-compiled.js","sourcesContent":["var createCtorWrapper = require('./createCtorWrapper');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar BIND_FLAG = 1;\n\n/**\n * Creates a function that wraps `func` and invokes it with the optional `this`\n * binding of `thisArg` and the `partials` prepended to those provided to\n * the wrapper.\n *\n * @private\n * @param {Function} func The function to partially apply arguments to.\n * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} partials The arguments to prepend to those provided to the new function.\n * @returns {Function} Returns the new bound function.\n */\nfunction createPartialWrapper(func, bitmask, thisArg, partials) {\n  var isBind = bitmask & BIND_FLAG,\n      Ctor = createCtorWrapper(func);\n\n  function wrapper() {\n    // Avoid `arguments` object use disqualifying optimizations by\n    // converting it to an array before providing it `func`.\n    var argsIndex = -1,\n        argsLength = arguments.length,\n        leftIndex = -1,\n        leftLength = partials.length,\n        args = Array(leftLength + argsLength);\n\n    while (++leftIndex < leftLength) {\n      args[leftIndex] = partials[leftIndex];\n    }\n    while (argsLength--) {\n      args[leftIndex++] = arguments[++argsIndex];\n    }\n    var fn = (this && this !== global && this instanceof wrapper) ? Ctor : func;\n    return fn.apply(isBind ? thisArg : this, args);\n  }\n  return wrapper;\n}\n\nmodule.exports = createPartialWrapper;\n"]}