{"version":3,"sources":["baseIndexOf.js"],"names":[],"mappings":"AAAA,IAAI,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC;;;;;;;;;;;AAAC,AAWzC,SAAS,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE;AAC5C,MAAI,KAAK,KAAK,KAAK,EAAE;AACnB,WAAO,UAAU,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;GACrC;AACD,MAAI,KAAK,GAAG,SAAS,GAAG,CAAC;MACrB,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;;AAE1B,SAAO,EAAE,KAAK,GAAG,MAAM,EAAE;AACvB,QAAI,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,EAAE;AAC1B,aAAO,KAAK,CAAC;KACd;GACF;AACD,SAAO,CAAC,CAAC,CAAC;CACX;;AAED,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC","file":"baseIndexOf-compiled.js","sourcesContent":["var indexOfNaN = require('./indexOfNaN');\n\n/**\n * The base implementation of `_.indexOf` without support for binary searches.\n *\n * @private\n * @param {Array} array The array to search.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  if (value !== value) {\n    return indexOfNaN(array, fromIndex);\n  }\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseIndexOf;\n"]}