{"version":3,"sources":["mergeData.js"],"names":[],"mappings":"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","file":"mergeData-compiled.js","sourcesContent":["var arrayCopy = require('./arrayCopy'),\n    composeArgs = require('./composeArgs'),\n    composeArgsRight = require('./composeArgsRight'),\n    replaceHolders = require('./replaceHolders');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar BIND_FLAG = 1,\n    CURRY_BOUND_FLAG = 4,\n    CURRY_FLAG = 8,\n    ARY_FLAG = 128,\n    REARG_FLAG = 256;\n\n/** Used as the internal argument placeholder. */\nvar PLACEHOLDER = '__lodash_placeholder__';\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Merges the function metadata of `source` into `data`.\n *\n * Merging metadata reduces the number of wrappers required to invoke a function.\n * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`\n * augment function arguments, making the order in which they are executed important,\n * preventing the merging of metadata. However, we make an exception for a safe\n * common case where curried functions have `_.ary` and or `_.rearg` applied.\n *\n * @private\n * @param {Array} data The destination metadata.\n * @param {Array} source The source metadata.\n * @returns {Array} Returns `data`.\n */\nfunction mergeData(data, source) {\n  var bitmask = data[1],\n      srcBitmask = source[1],\n      newBitmask = bitmask | srcBitmask,\n      isCommon = newBitmask < ARY_FLAG;\n\n  var isCombo =\n    (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||\n    (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||\n    (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);\n\n  // Exit early if metadata can't be merged.\n  if (!(isCommon || isCombo)) {\n    return data;\n  }\n  // Use source `thisArg` if available.\n  if (srcBitmask & BIND_FLAG) {\n    data[2] = source[2];\n    // Set when currying a bound function.\n    newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;\n  }\n  // Compose partial arguments.\n  var value = source[3];\n  if (value) {\n    var partials = data[3];\n    data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);\n    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);\n  }\n  // Compose partial right arguments.\n  value = source[5];\n  if (value) {\n    partials = data[5];\n    data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);\n    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);\n  }\n  // Use source `argPos` if available.\n  value = source[7];\n  if (value) {\n    data[7] = arrayCopy(value);\n  }\n  // Use source `ary` if it's smaller.\n  if (srcBitmask & ARY_FLAG) {\n    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n  }\n  // Use source `arity` if one is not provided.\n  if (data[9] == null) {\n    data[9] = source[9];\n  }\n  // Use source `func` and merge bitmasks.\n  data[0] = source[0];\n  data[1] = newBitmask;\n\n  return data;\n}\n\nmodule.exports = mergeData;\n"]}