{"version":3,"sources":["initCloneByTag.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC;;;AAAC,AAG3C,IAAI,OAAO,GAAG,kBAAkB;IAC5B,OAAO,GAAG,eAAe;IACzB,SAAS,GAAG,iBAAiB;IAC7B,SAAS,GAAG,iBAAiB;IAC7B,SAAS,GAAG,iBAAiB,CAAC;;AAElC,IAAI,cAAc,GAAG,sBAAsB;IACvC,UAAU,GAAG,uBAAuB;IACpC,UAAU,GAAG,uBAAuB;IACpC,OAAO,GAAG,oBAAoB;IAC9B,QAAQ,GAAG,qBAAqB;IAChC,QAAQ,GAAG,qBAAqB;IAChC,QAAQ,GAAG,qBAAqB;IAChC,eAAe,GAAG,4BAA4B;IAC9C,SAAS,GAAG,sBAAsB;IAClC,SAAS,GAAG,sBAAsB;;;AAAC,AAGvC,IAAI,OAAO,GAAG,MAAM;;;;;;;;;;;;;;AAAC,AAcrB,SAAS,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE;AAC3C,MAAI,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC;AAC9B,UAAQ,GAAG;AACT,SAAK,cAAc;AACjB,aAAO,WAAW,CAAC,MAAM,CAAC,CAAC;;AAAA,AAE7B,SAAK,OAAO,CAAC;AACb,SAAK,OAAO;AACV,aAAO,IAAI,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;;AAAA,AAE3B,SAAK,UAAU,CAAC,AAAC,KAAK,UAAU,CAAC;AACjC,SAAK,OAAO,CAAC,AAAC,KAAK,QAAQ,CAAC,AAAC,KAAK,QAAQ,CAAC;AAC3C,SAAK,QAAQ,CAAC,AAAC,KAAK,eAAe,CAAC,AAAC,KAAK,SAAS,CAAC,AAAC,KAAK,SAAS;AACjE,UAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAC3B,aAAO,IAAI,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,GAAG,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;;AAAA,AAE3F,SAAK,SAAS,CAAC;AACf,SAAK,SAAS;AACZ,aAAO,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC;;AAAA,AAE1B,SAAK,SAAS;AACZ,UAAI,MAAM,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;AAC3D,YAAM,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;AAAA,GACvC;AACD,SAAO,MAAM,CAAC;CACf;;AAED,MAAM,CAAC,OAAO,GAAG,cAAc,CAAC","file":"initCloneByTag-compiled.js","sourcesContent":["var bufferClone = require('./bufferClone');\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    stringTag = '[object String]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return bufferClone(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      var buffer = object.buffer;\n      return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      var result = new Ctor(object.source, reFlags.exec(object));\n      result.lastIndex = object.lastIndex;\n  }\n  return result;\n}\n\nmodule.exports = initCloneByTag;\n"]}