{"version":3,"sources":["baseDifference.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC;IACtC,YAAY,GAAG,OAAO,CAAC,gBAAgB,CAAC;IACxC,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC;;;AAAC,AAG3C,IAAI,gBAAgB,GAAG,GAAG;;;;;;;;;;;AAAC,AAW3B,SAAS,cAAc,CAAC,KAAK,EAAE,MAAM,EAAE;AACrC,MAAI,MAAM,GAAG,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC;MACjC,MAAM,GAAG,EAAE,CAAC;;AAEhB,MAAI,CAAC,MAAM,EAAE;AACX,WAAO,MAAM,CAAC;GACf;AACD,MAAI,KAAK,GAAG,CAAC,CAAC;MACV,OAAO,GAAG,WAAW;MACrB,QAAQ,GAAG,IAAI;MACf,KAAK,GAAG,AAAC,QAAQ,IAAI,MAAM,CAAC,MAAM,IAAI,gBAAgB,GAAI,WAAW,CAAC,MAAM,CAAC,GAAG,IAAI;MACpF,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC;;AAEjC,MAAI,KAAK,EAAE;AACT,WAAO,GAAG,YAAY,CAAC;AACvB,YAAQ,GAAG,KAAK,CAAC;AACjB,UAAM,GAAG,KAAK,CAAC;GAChB;AACD,OAAK,EACL,OAAO,EAAE,KAAK,GAAG,MAAM,EAAE;AACvB,QAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;;AAEzB,QAAI,QAAQ,IAAI,KAAK,KAAK,KAAK,EAAE;AAC/B,UAAI,WAAW,GAAG,YAAY,CAAC;AAC/B,aAAO,WAAW,EAAE,EAAE;AACpB,YAAI,MAAM,CAAC,WAAW,CAAC,KAAK,KAAK,EAAE;AACjC,mBAAS,KAAK,CAAC;SAChB;OACF;AACD,YAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACpB,MACI,IAAI,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE;AACtC,YAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACpB;GACF;AACD,SAAO,MAAM,CAAC;CACf;;AAED,MAAM,CAAC,OAAO,GAAG,cAAc,CAAC","file":"baseDifference-compiled.js","sourcesContent":["var baseIndexOf = require('./baseIndexOf'),\n    cacheIndexOf = require('./cacheIndexOf'),\n    createCache = require('./createCache');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.difference` which accepts a single array\n * of values to exclude.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values) {\n  var length = array ? array.length : 0,\n      result = [];\n\n  if (!length) {\n    return result;\n  }\n  var index = -1,\n      indexOf = baseIndexOf,\n      isCommon = true,\n      cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,\n      valuesLength = values.length;\n\n  if (cache) {\n    indexOf = cacheIndexOf;\n    isCommon = false;\n    values = cache;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index];\n\n    if (isCommon && value === value) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === value) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (indexOf(values, value, 0) < 0) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseDifference;\n"]}