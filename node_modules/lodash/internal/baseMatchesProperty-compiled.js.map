{"version":3,"sources":["baseMatchesProperty.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC;IAC9B,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC;IACtC,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC;IAClC,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC;IACpC,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC;IAC1B,kBAAkB,GAAG,OAAO,CAAC,sBAAsB,CAAC;IACpD,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC;IAC/B,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC;IAChC,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC;;;;;;;;;;AAAC,AAUjC,SAAS,mBAAmB,CAAC,IAAI,EAAE,QAAQ,EAAE;AAC3C,MAAI,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC;MACrB,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,kBAAkB,CAAC,QAAQ,CAAC;MACtD,OAAO,GAAI,IAAI,GAAG,EAAE,AAAC,CAAC;;AAE1B,MAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AACpB,SAAO,UAAS,MAAM,EAAE;AACtB,QAAI,MAAM,IAAI,IAAI,EAAE;AAClB,aAAO,KAAK,CAAC;KACd;AACD,QAAI,GAAG,GAAG,OAAO,CAAC;AAClB,UAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC1B,QAAI,CAAC,KAAK,IAAI,CAAC,QAAQ,CAAA,IAAK,EAAE,GAAG,IAAI,MAAM,CAAA,AAAC,EAAE;AAC5C,YAAM,GAAG,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7E,UAAI,MAAM,IAAI,IAAI,EAAE;AAClB,eAAO,KAAK,CAAC;OACd;AACD,SAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;AACjB,YAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;KAC3B;AACD,WAAO,MAAM,CAAC,GAAG,CAAC,KAAK,QAAQ,GAC1B,QAAQ,KAAK,SAAS,IAAK,GAAG,IAAI,MAAM,AAAC,GAC1C,WAAW,CAAC,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;GACzD,CAAC;CACH;;AAED,MAAM,CAAC,OAAO,GAAG,mBAAmB,CAAC","file":"baseMatchesProperty-compiled.js","sourcesContent":["var baseGet = require('./baseGet'),\n    baseIsEqual = require('./baseIsEqual'),\n    baseSlice = require('./baseSlice'),\n    isArray = require('../lang/isArray'),\n    isKey = require('./isKey'),\n    isStrictComparable = require('./isStrictComparable'),\n    last = require('../array/last'),\n    toObject = require('./toObject'),\n    toPath = require('./toPath');\n\n/**\n * The base implementation of `_.matchesProperty` which does not clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to compare.\n * @returns {Function} Returns the new function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  var isArr = isArray(path),\n      isCommon = isKey(path) && isStrictComparable(srcValue),\n      pathKey = (path + '');\n\n  path = toPath(path);\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    var key = pathKey;\n    object = toObject(object);\n    if ((isArr || !isCommon) && !(key in object)) {\n      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n      if (object == null) {\n        return false;\n      }\n      key = last(path);\n      object = toObject(object);\n    }\n    return object[key] === srcValue\n      ? (srcValue !== undefined || (key in object))\n      : baseIsEqual(srcValue, object[key], undefined, true);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n"]}