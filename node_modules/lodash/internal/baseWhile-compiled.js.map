{"version":3,"sources":["baseWhile.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC;;;;;;;;;;;;;AAAC,AAavC,SAAS,SAAS,CAAC,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE;AACtD,QAAI,MAAM,GAAG,KAAK,CAAC,MAAM;QACrB,KAAK,GAAG,SAAS,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC;;AAEpC,WAAO,CAAC,SAAS,GAAG,KAAK,EAAE,GAAG,EAAE,KAAK,GAAG,MAAM,CAAA,IAAK,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE,EAAE;AAC5F,WAAO,MAAM,GACT,SAAS,CAAC,KAAK,EAAG,SAAS,GAAG,CAAC,GAAG,KAAK,EAAI,SAAS,GAAG,KAAK,GAAG,CAAC,GAAG,MAAM,CAAE,GAC3E,SAAS,CAAC,KAAK,EAAG,SAAS,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,EAAI,SAAS,GAAG,MAAM,GAAG,KAAK,CAAE,CAAC;CACjF;;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC","file":"baseWhile-compiled.js","sourcesContent":["var baseSlice = require('./baseSlice');\n\n/**\n * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,\n * and `_.takeWhile` without support for callback shorthands and `this` binding.\n *\n * @private\n * @param {Array} array The array to query.\n * @param {Function} predicate The function invoked per iteration.\n * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseWhile(array, predicate, isDrop, fromRight) {\n  var length = array.length,\n      index = fromRight ? length : -1;\n\n  while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}\n  return isDrop\n    ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n    : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n}\n\nmodule.exports = baseWhile;\n"]}