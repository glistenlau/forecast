{"version":3,"sources":["isIndex.js"],"names":[],"mappings":";AACA,IAAI,QAAQ,GAAG,OAAO;;;;;;AAAC,AAMvB,IAAI,gBAAgB,GAAG,gBAAgB;;;;;;;;;;AAAC,AAUxC,SAAS,OAAO,CAAC,KAAK,EAAE,MAAM,EAAE;AAC9B,OAAK,GAAG,AAAC,OAAO,KAAK,IAAI,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;AACzE,QAAM,GAAG,MAAM,IAAI,IAAI,GAAG,gBAAgB,GAAG,MAAM,CAAC;AACpD,SAAO,KAAK,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,GAAG,MAAM,CAAC;CACvD;;AAED,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"isIndex-compiled.js","sourcesContent":["/** Used to detect unsigned integer values. */\nvar reIsUint = /^\\d+$/;\n\n/**\n * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return value > -1 && value % 1 == 0 && value < length;\n}\n\nmodule.exports = isIndex;\n"]}