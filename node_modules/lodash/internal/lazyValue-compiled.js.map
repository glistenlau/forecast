{"version":3,"sources":["lazyValue.js"],"names":[],"mappings":"AAAA,IAAI,gBAAgB,GAAG,OAAO,CAAC,oBAAoB,CAAC;IAChD,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC;IAC9B,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC;;;AAAC,AAGzC,IAAI,gBAAgB,GAAG,GAAG;;;AAAC,AAG3B,IAAI,gBAAgB,GAAG,CAAC;IACpB,aAAa,GAAG,CAAC;;;AAAC,AAGtB,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG;;;;;;;;;;AAAC,AAUzB,SAAS,SAAS,GAAG;AACnB,MAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;MAChC,GAAG,GAAG,IAAI,CAAC,OAAO;MAClB,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;MACtB,OAAO,GAAG,GAAG,GAAG,CAAC;MACjB,SAAS,GAAG,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC;MACpC,IAAI,GAAG,OAAO,CAAC,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC;MAC5C,KAAK,GAAG,IAAI,CAAC,KAAK;MAClB,GAAG,GAAG,IAAI,CAAC,GAAG;MACd,MAAM,GAAG,GAAG,GAAG,KAAK;MACpB,KAAK,GAAG,OAAO,GAAG,GAAG,GAAI,KAAK,GAAG,CAAC,AAAC;MACnC,SAAS,GAAG,IAAI,CAAC,aAAa;MAC9B,UAAU,GAAG,SAAS,CAAC,MAAM;MAC7B,QAAQ,GAAG,CAAC;MACZ,SAAS,GAAG,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;;AAEtD,MAAI,CAAC,KAAK,IAAI,SAAS,GAAG,gBAAgB,IAAK,SAAS,IAAI,MAAM,IAAI,SAAS,IAAI,MAAM,AAAC,EAAE;AAC1F,WAAO,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;GAClD;AACD,MAAI,MAAM,GAAG,EAAE,CAAC;;AAEhB,OAAK,EACL,OAAO,MAAM,EAAE,IAAI,QAAQ,GAAG,SAAS,EAAE;AACvC,SAAK,IAAI,GAAG,CAAC;;AAEb,QAAI,SAAS,GAAG,CAAC,CAAC;QACd,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;;AAEzB,WAAO,EAAE,SAAS,GAAG,UAAU,EAAE;AAC/B,UAAI,IAAI,GAAG,SAAS,CAAC,SAAS,CAAC;UAC3B,QAAQ,GAAG,IAAI,CAAC,QAAQ;UACxB,IAAI,GAAG,IAAI,CAAC,IAAI;UAChB,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;;AAE/B,UAAI,IAAI,IAAI,aAAa,EAAE;AACzB,aAAK,GAAG,QAAQ,CAAC;OAClB,MAAM,IAAI,CAAC,QAAQ,EAAE;AACpB,YAAI,IAAI,IAAI,gBAAgB,EAAE;AAC5B,mBAAS,KAAK,CAAC;SAChB,MAAM;AACL,gBAAM,KAAK,CAAC;SACb;OACF;KACF;AACD,UAAM,CAAC,QAAQ,EAAE,CAAC,GAAG,KAAK,CAAC;GAC5B;AACD,SAAO,MAAM,CAAC;CACf;;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC","file":"lazyValue-compiled.js","sourcesContent":["var baseWrapperValue = require('./baseWrapperValue'),\n    getView = require('./getView'),\n    isArray = require('../lang/isArray');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to indicate the type of lazy iteratees. */\nvar LAZY_FILTER_FLAG = 1,\n    LAZY_MAP_FLAG = 2;\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Extracts the unwrapped value from its lazy wrapper.\n *\n * @private\n * @name value\n * @memberOf LazyWrapper\n * @returns {*} Returns the unwrapped value.\n */\nfunction lazyValue() {\n  var array = this.__wrapped__.value(),\n      dir = this.__dir__,\n      isArr = isArray(array),\n      isRight = dir < 0,\n      arrLength = isArr ? array.length : 0,\n      view = getView(0, arrLength, this.__views__),\n      start = view.start,\n      end = view.end,\n      length = end - start,\n      index = isRight ? end : (start - 1),\n      iteratees = this.__iteratees__,\n      iterLength = iteratees.length,\n      resIndex = 0,\n      takeCount = nativeMin(length, this.__takeCount__);\n\n  if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {\n    return baseWrapperValue(array, this.__actions__);\n  }\n  var result = [];\n\n  outer:\n  while (length-- && resIndex < takeCount) {\n    index += dir;\n\n    var iterIndex = -1,\n        value = array[index];\n\n    while (++iterIndex < iterLength) {\n      var data = iteratees[iterIndex],\n          iteratee = data.iteratee,\n          type = data.type,\n          computed = iteratee(value);\n\n      if (type == LAZY_MAP_FLAG) {\n        value = computed;\n      } else if (!computed) {\n        if (type == LAZY_FILTER_FLAG) {\n          continue outer;\n        } else {\n          break outer;\n        }\n      }\n    }\n    result[resIndex++] = value;\n  }\n  return result;\n}\n\nmodule.exports = lazyValue;\n"]}