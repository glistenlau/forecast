{"version":3,"sources":["baseMergeDeep.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC;IAClC,WAAW,GAAG,OAAO,CAAC,qBAAqB,CAAC;IAC5C,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC;IACpC,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC;IACtC,aAAa,GAAG,OAAO,CAAC,uBAAuB,CAAC;IAChD,YAAY,GAAG,OAAO,CAAC,sBAAsB,CAAC;IAC9C,aAAa,GAAG,OAAO,CAAC,uBAAuB,CAAC;;;;;;;;;;;;;;;;;AAAC,AAiBrD,SAAS,aAAa,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE;AACjF,MAAI,MAAM,GAAG,MAAM,CAAC,MAAM;MACtB,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;;AAE3B,SAAO,MAAM,EAAE,EAAE;AACf,QAAI,MAAM,CAAC,MAAM,CAAC,IAAI,QAAQ,EAAE;AAC9B,YAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AAC7B,aAAO;KACR;GACF;AACD,MAAI,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC;MACnB,MAAM,GAAG,UAAU,GAAG,UAAU,CAAC,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC,GAAG,SAAS;MAClF,QAAQ,GAAG,MAAM,KAAK,SAAS,CAAC;;AAEpC,MAAI,QAAQ,EAAE;AACZ,UAAM,GAAG,QAAQ,CAAC;AAClB,QAAI,WAAW,CAAC,QAAQ,CAAC,KAAK,OAAO,CAAC,QAAQ,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAA,AAAC,EAAE;AAC1E,YAAM,GAAG,OAAO,CAAC,KAAK,CAAC,GACnB,KAAK,GACJ,WAAW,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,AAAC,CAAC;KAClD,MACI,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC,QAAQ,CAAC,EAAE;AACzD,YAAM,GAAG,WAAW,CAAC,KAAK,CAAC,GACvB,aAAa,CAAC,KAAK,CAAC,GACnB,aAAa,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,EAAE,AAAC,CAAC;KACzC,MACI;AACH,cAAQ,GAAG,KAAK,CAAC;KAClB;GACF;;;AAAA,AAGD,QAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACtB,QAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;AAEpB,MAAI,QAAQ,EAAE;;AAEZ,UAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;GACvE,MAAM,IAAI,MAAM,KAAK,MAAM,GAAI,MAAM,KAAK,KAAK,GAAK,KAAK,KAAK,KAAK,AAAC,EAAE;AACrE,UAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;GACtB;CACF;;AAED,MAAM,CAAC,OAAO,GAAG,aAAa,CAAC","file":"baseMergeDeep-compiled.js","sourcesContent":["var arrayCopy = require('./arrayCopy'),\n    isArguments = require('../lang/isArguments'),\n    isArray = require('../lang/isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isPlainObject = require('../lang/isPlainObject'),\n    isTypedArray = require('../lang/isTypedArray'),\n    toPlainObject = require('../lang/toPlainObject');\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Array} [stackA=[]] Tracks traversed source objects.\n * @param {Array} [stackB=[]] Associates values with source counterparts.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {\n  var length = stackA.length,\n      srcValue = source[key];\n\n  while (length--) {\n    if (stackA[length] == srcValue) {\n      object[key] = stackB[length];\n      return;\n    }\n  }\n  var value = object[key],\n      result = customizer ? customizer(value, srcValue, key, object, source) : undefined,\n      isCommon = result === undefined;\n\n  if (isCommon) {\n    result = srcValue;\n    if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {\n      result = isArray(value)\n        ? value\n        : (isArrayLike(value) ? arrayCopy(value) : []);\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      result = isArguments(value)\n        ? toPlainObject(value)\n        : (isPlainObject(value) ? value : {});\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  // Add the source value to the stack of traversed objects and associate\n  // it with its merged value.\n  stackA.push(srcValue);\n  stackB.push(result);\n\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);\n  } else if (result === result ? (result !== value) : (value === value)) {\n    object[key] = result;\n  }\n}\n\nmodule.exports = baseMergeDeep;\n"]}