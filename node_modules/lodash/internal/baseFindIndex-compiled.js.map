{"version":3,"sources":["baseFindIndex.js"],"names":[],"mappings":";;;;;;;;;;AAUA,SAAS,aAAa,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE;AAClD,MAAI,MAAM,GAAG,KAAK,CAAC,MAAM;MACrB,KAAK,GAAG,SAAS,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC;;AAEpC,SAAQ,SAAS,GAAG,KAAK,EAAE,GAAG,EAAE,KAAK,GAAG,MAAM,EAAG;AAC/C,QAAI,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE;AACzC,aAAO,KAAK,CAAC;KACd;GACF;AACD,SAAO,CAAC,CAAC,CAAC;CACX;;AAED,MAAM,CAAC,OAAO,GAAG,aAAa,CAAC","file":"baseFindIndex-compiled.js","sourcesContent":["/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for callback shorthands and `this` binding.\n *\n * @private\n * @param {Array} array The array to search.\n * @param {Function} predicate The function invoked per iteration.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromRight) {\n  var length = array.length,\n      index = fromRight ? length : -1;\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n"]}