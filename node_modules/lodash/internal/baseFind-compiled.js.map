{"version":3,"sources":["baseFind.js"],"names":[],"mappings":";;;;;;;;;;;;;AAaA,SAAS,QAAQ,CAAC,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE;AACzD,MAAI,MAAM,CAAC;AACX,UAAQ,CAAC,UAAU,EAAE,UAAS,KAAK,EAAE,GAAG,EAAE,UAAU,EAAE;AACpD,QAAI,SAAS,CAAC,KAAK,EAAE,GAAG,EAAE,UAAU,CAAC,EAAE;AACrC,YAAM,GAAG,MAAM,GAAG,GAAG,GAAG,KAAK,CAAC;AAC9B,aAAO,KAAK,CAAC;KACd;GACF,CAAC,CAAC;AACH,SAAO,MAAM,CAAC;CACf;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC","file":"baseFind-compiled.js","sourcesContent":["/**\n * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,\n * without support for callback shorthands and `this` binding, which iterates\n * over `collection` using the provided `eachFunc`.\n *\n * @private\n * @param {Array|Object|string} collection The collection to search.\n * @param {Function} predicate The function invoked per iteration.\n * @param {Function} eachFunc The function to iterate over `collection`.\n * @param {boolean} [retKey] Specify returning the key of the found element\n *  instead of the element itself.\n * @returns {*} Returns the found element or its key, else `undefined`.\n */\nfunction baseFind(collection, predicate, eachFunc, retKey) {\n  var result;\n  eachFunc(collection, function(value, key, collection) {\n    if (predicate(value, key, collection)) {\n      result = retKey ? key : value;\n      return false;\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFind;\n"]}