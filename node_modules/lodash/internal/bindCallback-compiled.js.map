{"version":3,"sources":["bindCallback.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,GAAG,OAAO,CAAC,qBAAqB,CAAC;;;;;;;;;;;;AAAC,AAY9C,SAAS,YAAY,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE;AAC7C,MAAI,OAAO,IAAI,IAAI,UAAU,EAAE;AAC7B,WAAO,QAAQ,CAAC;GACjB;AACD,MAAI,OAAO,KAAK,SAAS,EAAE;AACzB,WAAO,IAAI,CAAC;GACb;AACD,UAAQ,QAAQ;AACd,SAAK,CAAC;AAAE,aAAO,UAAS,KAAK,EAAE;AAC7B,eAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;OAClC,CAAC;AAAA,AACF,SAAK,CAAC;AAAE,aAAO,UAAS,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE;AAChD,eAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;OACrD,CAAC;AAAA,AACF,SAAK,CAAC;AAAE,aAAO,UAAS,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE;AAC7D,eAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;OAClE,CAAC;AAAA,AACF,SAAK,CAAC;AAAE,aAAO,UAAS,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE;AACzD,eAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;OAC9D,CAAC;AAAA,GACH;AACD,SAAO,YAAW;AAChB,WAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;GACvC,CAAC;CACH;;AAED,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC","file":"bindCallback-compiled.js","sourcesContent":["var identity = require('../utility/identity');\n\n/**\n * A specialized version of `baseCallback` which only supports `this` binding\n * and specifying the number of arguments to provide to `func`.\n *\n * @private\n * @param {Function} func The function to bind.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {number} [argCount] The number of arguments to provide to `func`.\n * @returns {Function} Returns the callback.\n */\nfunction bindCallback(func, thisArg, argCount) {\n  if (typeof func != 'function') {\n    return identity;\n  }\n  if (thisArg === undefined) {\n    return func;\n  }\n  switch (argCount) {\n    case 1: return function(value) {\n      return func.call(thisArg, value);\n    };\n    case 3: return function(value, index, collection) {\n      return func.call(thisArg, value, index, collection);\n    };\n    case 4: return function(accumulator, value, index, collection) {\n      return func.call(thisArg, accumulator, value, index, collection);\n    };\n    case 5: return function(value, other, key, object, source) {\n      return func.call(thisArg, value, other, key, object, source);\n    };\n  }\n  return function() {\n    return func.apply(thisArg, arguments);\n  };\n}\n\nmodule.exports = bindCallback;\n"]}