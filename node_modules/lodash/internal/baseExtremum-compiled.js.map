{"version":3,"sources":["baseExtremum.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC;;;;;;;;;;;;;;AAAC,AAcrC,SAAS,YAAY,CAAC,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE;AAC/D,MAAI,QAAQ,GAAG,OAAO;MAClB,MAAM,GAAG,QAAQ,CAAC;;AAEtB,UAAQ,CAAC,UAAU,EAAE,UAAS,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE;AACtD,QAAI,OAAO,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;AAClD,QAAI,UAAU,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAK,OAAO,KAAK,OAAO,IAAI,OAAO,KAAK,MAAM,AAAC,EAAE;AAChF,cAAQ,GAAG,OAAO,CAAC;AACnB,YAAM,GAAG,KAAK,CAAC;KAChB;GACF,CAAC,CAAC;AACH,SAAO,MAAM,CAAC;CACf;;AAED,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC","file":"baseExtremum-compiled.js","sourcesContent":["var baseEach = require('./baseEach');\n\n/**\n * Gets the extremum value of `collection` invoking `iteratee` for each value\n * in `collection` to generate the criterion by which the value is ranked.\n * The `iteratee` is invoked with three arguments: (value, index|key, collection).\n *\n * @private\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} comparator The function used to compare values.\n * @param {*} exValue The initial extremum value.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(collection, iteratee, comparator, exValue) {\n  var computed = exValue,\n      result = computed;\n\n  baseEach(collection, function(value, index, collection) {\n    var current = +iteratee(value, index, collection);\n    if (comparator(current, computed) || (current === exValue && current === result)) {\n      computed = current;\n      result = value;\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseExtremum;\n"]}