{"version":3,"sources":["createCompounder.js"],"names":[],"mappings":"AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC;IACpC,KAAK,GAAG,OAAO,CAAC,iBAAiB,CAAC;;;;;;;;;;AAAC,AAUvC,SAAS,gBAAgB,CAAC,QAAQ,EAAE;AAClC,SAAO,UAAS,MAAM,EAAE;AACtB,QAAI,KAAK,GAAG,CAAC,CAAC;QACV,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC7B,MAAM,GAAG,KAAK,CAAC,MAAM;QACrB,MAAM,GAAG,EAAE,CAAC;;AAEhB,WAAO,EAAE,KAAK,GAAG,MAAM,EAAE;AACvB,YAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;KAChD;AACD,WAAO,MAAM,CAAC;GACf,CAAC;CACH;;AAED,MAAM,CAAC,OAAO,GAAG,gBAAgB,CAAC","file":"createCompounder-compiled.js","sourcesContent":["var deburr = require('../string/deburr'),\n    words = require('../string/words');\n\n/**\n * Creates a function that produces compound words out of the words in a\n * given string.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    var index = -1,\n        array = words(deburr(string)),\n        length = array.length,\n        result = '';\n\n    while (++index < length) {\n      result = callback(result, array[index], index);\n    }\n    return result;\n  };\n}\n\nmodule.exports = createCompounder;\n"]}