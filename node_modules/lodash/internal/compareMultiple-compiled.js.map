{"version":3,"sources":["compareMultiple.js"],"names":[],"mappings":"AAAA,IAAI,oBAAoB,GAAG,OAAO,CAAC,wBAAwB,CAAC;;;;;;;;;;;;;;;;AAAC,AAgB7D,SAAS,eAAe,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE;AAC9C,MAAI,KAAK,GAAG,CAAC,CAAC;MACV,WAAW,GAAG,MAAM,CAAC,QAAQ;MAC7B,WAAW,GAAG,KAAK,CAAC,QAAQ;MAC5B,MAAM,GAAG,WAAW,CAAC,MAAM;MAC3B,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC;;AAEjC,SAAO,EAAE,KAAK,GAAG,MAAM,EAAE;AACvB,QAAI,MAAM,GAAG,oBAAoB,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;AAC1E,QAAI,MAAM,EAAE;AACV,UAAI,KAAK,IAAI,YAAY,EAAE;AACzB,eAAO,MAAM,CAAC;OACf;AACD,UAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;AAC1B,aAAO,MAAM,IAAI,AAAC,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,GAAI,CAAC,GAAG,CAAC,CAAC,CAAA,AAAC,CAAC;KAChE;GACF;;;;;;;;AAAA,AAQD,SAAO,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;CACnC;;AAED,MAAM,CAAC,OAAO,GAAG,eAAe,CAAC","file":"compareMultiple-compiled.js","sourcesContent":["var baseCompareAscending = require('./baseCompareAscending');\n\n/**\n * Used by `_.sortByOrder` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,\n * a value is sorted in ascending order if its corresponding order is \"asc\", and\n * descending if \"desc\".\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = baseCompareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * ((order === 'asc' || order === true) ? 1 : -1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://code.google.com/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n"]}