{"version":3,"sources":["reorder.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC;IAClC,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC;;;AAAC,AAGnC,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG;;;;;;;;;;;;AAAC,AAYzB,SAAS,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE;AAC/B,MAAI,SAAS,GAAG,KAAK,CAAC,MAAM;MACxB,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,SAAS,CAAC;MAC7C,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;;AAEhC,SAAO,MAAM,EAAE,EAAE;AACf,QAAI,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC5B,SAAK,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;GACzE;AACD,SAAO,KAAK,CAAC;CACd;;AAED,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"reorder-compiled.js","sourcesContent":["var arrayCopy = require('./arrayCopy'),\n    isIndex = require('./isIndex');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Reorder `array` according to the specified indexes where the element at\n * the first index is assigned as the first element, the element at\n * the second index is assigned as the second element, and so on.\n *\n * @private\n * @param {Array} array The array to reorder.\n * @param {Array} indexes The arranged array indexes.\n * @returns {Array} Returns `array`.\n */\nfunction reorder(array, indexes) {\n  var arrLength = array.length,\n      length = nativeMin(indexes.length, arrLength),\n      oldArray = arrayCopy(array);\n\n  while (length--) {\n    var index = indexes[length];\n    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n  }\n  return array;\n}\n\nmodule.exports = reorder;\n"]}