{"version":3,"sources":["arrayReduce.js"],"names":[],"mappings":";;;;;;;;;;;;AAYA,SAAS,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,WAAW,EAAE,aAAa,EAAE;AAChE,MAAI,KAAK,GAAG,CAAC,CAAC;MACV,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;;AAE1B,MAAI,aAAa,IAAI,MAAM,EAAE;AAC3B,eAAW,GAAG,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;GAC9B;AACD,SAAO,EAAE,KAAK,GAAG,MAAM,EAAE;AACvB,eAAW,GAAG,QAAQ,CAAC,WAAW,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;GACjE;AACD,SAAO,WAAW,CAAC;CACpB;;AAED,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC","file":"arrayReduce-compiled.js","sourcesContent":["/**\n * A specialized version of `_.reduce` for arrays without support for callback\n * shorthands and `this` binding.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initFromArray] Specify using the first element of `array`\n *  as the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initFromArray) {\n  var index = -1,\n      length = array.length;\n\n  if (initFromArray && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayReduce;\n"]}