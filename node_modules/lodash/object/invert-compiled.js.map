{"version":3,"sources":["invert.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,GAAG,OAAO,CAAC,4BAA4B,CAAC;IACtD,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC;;;AAAC,AAG7B,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS;;;AAAC,AAGnC,IAAI,cAAc,GAAG,WAAW,CAAC,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AAyBhD,SAAS,MAAM,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE;AACzC,MAAI,KAAK,IAAI,cAAc,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK,CAAC,EAAE;AACtD,cAAU,GAAG,SAAS,CAAC;GACxB;AACD,MAAI,KAAK,GAAG,CAAC,CAAC;MACV,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;MACpB,MAAM,GAAG,KAAK,CAAC,MAAM;MACrB,MAAM,GAAG,EAAE,CAAC;;AAEhB,SAAO,EAAE,KAAK,GAAG,MAAM,EAAE;AACvB,QAAI,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC;QAClB,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;;AAExB,QAAI,UAAU,EAAE;AACd,UAAI,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE;AACtC,cAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;OACzB,MAAM;AACL,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;OACvB;KACF,MACI;AACH,YAAM,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;KACrB;GACF;AACD,SAAO,MAAM,CAAC;CACf;;AAED,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC","file":"invert-compiled.js","sourcesContent":["var isIterateeCall = require('../internal/isIterateeCall'),\n    keys = require('./keys');\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of the inverted keys and values of `object`.\n * If `object` contains duplicate values, subsequent values overwrite property\n * assignments of previous values unless `multiValue` is `true`.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to invert.\n * @param {boolean} [multiValue] Allow multiple values per key.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {Object} Returns the new inverted object.\n * @example\n *\n * var object = { 'a': 1, 'b': 2, 'c': 1 };\n *\n * _.invert(object);\n * // => { '1': 'c', '2': 'b' }\n *\n * // with `multiValue`\n * _.invert(object, true);\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */\nfunction invert(object, multiValue, guard) {\n  if (guard && isIterateeCall(object, multiValue, guard)) {\n    multiValue = undefined;\n  }\n  var index = -1,\n      props = keys(object),\n      length = props.length,\n      result = {};\n\n  while (++index < length) {\n    var key = props[index],\n        value = object[key];\n\n    if (multiValue) {\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }\n    else {\n      result[value] = key;\n    }\n  }\n  return result;\n}\n\nmodule.exports = invert;\n"]}