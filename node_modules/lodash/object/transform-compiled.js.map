{"version":3,"sources":["transform.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,GAAG,OAAO,CAAC,uBAAuB,CAAC;IAC5C,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC;IAClD,UAAU,GAAG,OAAO,CAAC,wBAAwB,CAAC;IAC9C,UAAU,GAAG,OAAO,CAAC,wBAAwB,CAAC;IAC9C,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC;IACpC,UAAU,GAAG,OAAO,CAAC,oBAAoB,CAAC;IAC1C,QAAQ,GAAG,OAAO,CAAC,kBAAkB,CAAC;IACtC,YAAY,GAAG,OAAO,CAAC,sBAAsB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AA+BnD,SAAS,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE;AACzD,MAAI,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;AACpD,UAAQ,GAAG,YAAY,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;;AAE9C,MAAI,WAAW,IAAI,IAAI,EAAE;AACvB,QAAI,KAAK,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;AAC7B,UAAI,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC;AAC9B,UAAI,KAAK,EAAE;AACT,mBAAW,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,IAAI,EAAA,GAAG,EAAE,CAAC;OAC/C,MAAM;AACL,mBAAW,GAAG,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,CAAC;OACzE;KACF,MAAM;AACL,iBAAW,GAAG,EAAE,CAAC;KAClB;GACF;AACD,GAAC,KAAK,GAAG,SAAS,GAAG,UAAU,CAAA,CAAE,MAAM,EAAE,UAAS,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;AACtE,WAAO,QAAQ,CAAC,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;GACpD,CAAC,CAAC;AACH,SAAO,WAAW,CAAC;CACpB;;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC","file":"transform-compiled.js","sourcesContent":["var arrayEach = require('../internal/arrayEach'),\n    baseCallback = require('../internal/baseCallback'),\n    baseCreate = require('../internal/baseCreate'),\n    baseForOwn = require('../internal/baseForOwn'),\n    isArray = require('../lang/isArray'),\n    isFunction = require('../lang/isFunction'),\n    isObject = require('../lang/isObject'),\n    isTypedArray = require('../lang/isTypedArray');\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own enumerable\n * properties through `iteratee`, with each invocation potentially mutating\n * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked\n * with four arguments: (accumulator, value, key, object). Iteratee functions\n * may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Array|Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * });\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {\n *   result[key] = n * 3;\n * });\n * // => { 'a': 3, 'b': 6 }\n */\nfunction transform(object, iteratee, accumulator, thisArg) {\n  var isArr = isArray(object) || isTypedArray(object);\n  iteratee = baseCallback(iteratee, thisArg, 4);\n\n  if (accumulator == null) {\n    if (isArr || isObject(object)) {\n      var Ctor = object.constructor;\n      if (isArr) {\n        accumulator = isArray(object) ? new Ctor : [];\n      } else {\n        accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);\n      }\n    } else {\n      accumulator = {};\n    }\n  }\n  (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = transform;\n"]}