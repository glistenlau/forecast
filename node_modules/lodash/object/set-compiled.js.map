{"version":3,"sources":["set.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,GAAG,OAAO,CAAC,qBAAqB,CAAC;IACxC,KAAK,GAAG,OAAO,CAAC,mBAAmB,CAAC;IACpC,QAAQ,GAAG,OAAO,CAAC,kBAAkB,CAAC;IACtC,MAAM,GAAG,OAAO,CAAC,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AAyB3C,SAAS,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;AAChC,MAAI,MAAM,IAAI,IAAI,EAAE;AAClB,WAAO,MAAM,CAAC;GACf;AACD,MAAI,OAAO,GAAI,IAAI,GAAG,EAAE,AAAC,CAAC;AAC1B,MAAI,GAAG,AAAC,MAAM,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,GAAI,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;;AAEnF,MAAI,KAAK,GAAG,CAAC,CAAC;MACV,MAAM,GAAG,IAAI,CAAC,MAAM;MACpB,SAAS,GAAG,MAAM,GAAG,CAAC;MACtB,MAAM,GAAG,MAAM,CAAC;;AAEpB,SAAO,MAAM,IAAI,IAAI,IAAI,EAAE,KAAK,GAAG,MAAM,EAAE;AACzC,QAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;AACtB,QAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;AACpB,UAAI,KAAK,IAAI,SAAS,EAAE;AACtB,cAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;OACrB,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;AAC9B,cAAM,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;OAClD;KACF;AACD,UAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;GACtB;AACD,SAAO,MAAM,CAAC;CACf;;AAED,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC","file":"set-compiled.js","sourcesContent":["var isIndex = require('../internal/isIndex'),\n    isKey = require('../internal/isKey'),\n    isObject = require('../lang/isObject'),\n    toPath = require('../internal/toPath');\n\n/**\n * Sets the property value of `path` on `object`. If a portion of `path`\n * does not exist it's created.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to augment.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.set(object, 'a[0].b.c', 4);\n * console.log(object.a[0].b.c);\n * // => 4\n *\n * _.set(object, 'x[0].y.z', 5);\n * console.log(object.x[0].y.z);\n * // => 5\n */\nfunction set(object, path, value) {\n  if (object == null) {\n    return object;\n  }\n  var pathKey = (path + '');\n  path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = path[index];\n    if (isObject(nested)) {\n      if (index == lastIndex) {\n        nested[key] = value;\n      } else if (nested[key] == null) {\n        nested[key] = isIndex(path[index + 1]) ? [] : {};\n      }\n    }\n    nested = nested[key];\n  }\n  return object;\n}\n\nmodule.exports = set;\n"]}