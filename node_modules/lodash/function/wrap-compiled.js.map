{"version":3,"sources":["wrap.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,GAAG,OAAO,CAAC,2BAA2B,CAAC;IACpD,QAAQ,GAAG,OAAO,CAAC,qBAAqB,CAAC;;;AAAC,AAG9C,IAAI,YAAY,GAAG,EAAE;;;;;;;;;;;;;;;;;;;;;;;AAAC,AAuBtB,SAAS,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE;AAC5B,SAAO,GAAG,OAAO,IAAI,IAAI,GAAG,QAAQ,GAAG,OAAO,CAAC;AAC/C,SAAO,aAAa,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;CACrE;;AAED,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC","file":"wrap-compiled.js","sourcesContent":["var createWrapper = require('../internal/createWrapper'),\n    identity = require('../utility/identity');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar PARTIAL_FLAG = 32;\n\n/**\n * Creates a function that provides `value` to the wrapper function as its\n * first argument. Any additional arguments provided to the function are\n * appended to those provided to the wrapper function. The wrapper is invoked\n * with the `this` binding of the created function.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {*} value The value to wrap.\n * @param {Function} wrapper The wrapper function.\n * @returns {Function} Returns the new function.\n * @example\n *\n * var p = _.wrap(_.escape, function(func, text) {\n *   return '<p>' + func(text) + '</p>';\n * });\n *\n * p('fred, barney, & pebbles');\n * // => '<p>fred, barney, &amp; pebbles</p>'\n */\nfunction wrap(value, wrapper) {\n  wrapper = wrapper == null ? identity : wrapper;\n  return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);\n}\n\nmodule.exports = wrap;\n"]}