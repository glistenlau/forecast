{"version":3,"sources":["negate.js"],"names":[],"mappings":";AACA,IAAI,eAAe,GAAG,qBAAqB;;;;;;;;;;;;;;;;;;;;;AAAC,AAqB5C,SAAS,MAAM,CAAC,SAAS,EAAE;AACzB,MAAI,OAAO,SAAS,IAAI,UAAU,EAAE;AAClC,UAAM,IAAI,SAAS,CAAC,eAAe,CAAC,CAAC;GACtC;AACD,SAAO,YAAW;AAChB,WAAO,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;GAC1C,CAAC;CACH;;AAED,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC","file":"negate-compiled.js","sourcesContent":["/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    return !predicate.apply(this, arguments);\n  };\n}\n\nmodule.exports = negate;\n"]}