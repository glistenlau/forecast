{"version":3,"sources":["modArgs.js"],"names":[],"mappings":"AAAA,IAAI,UAAU,GAAG,OAAO,CAAC,wBAAwB,CAAC;IAC9C,WAAW,GAAG,OAAO,CAAC,yBAAyB,CAAC;IAChD,cAAc,GAAG,OAAO,CAAC,4BAA4B,CAAC;IACtD,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC;;;AAAC,AAGvC,IAAI,eAAe,GAAG,qBAAqB;;;AAAC,AAG5C,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AAiCzB,IAAI,OAAO,GAAG,SAAS,CAAC,UAAS,IAAI,EAAE,UAAU,EAAE;AACjD,YAAU,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;AACrC,MAAI,OAAO,IAAI,IAAI,UAAU,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,cAAc,CAAC,EAAE;AACxE,UAAM,IAAI,SAAS,CAAC,eAAe,CAAC,CAAC;GACtC;AACD,MAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;AAC/B,SAAO,SAAS,CAAC,UAAS,IAAI,EAAE;AAC9B,QAAI,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC3C,WAAO,KAAK,EAAE,EAAE;AACd,UAAI,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;KAC9C;AACD,WAAO,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;GAC/B,CAAC,CAAC;CACJ,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"modArgs-compiled.js","sourcesContent":["var arrayEvery = require('../internal/arrayEvery'),\n    baseFlatten = require('../internal/baseFlatten'),\n    baseIsFunction = require('../internal/baseIsFunction'),\n    restParam = require('./restParam');\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Creates a function that runs each argument through a corresponding\n * transform function.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to wrap.\n * @param {...(Function|Function[])} [transforms] The functions to transform\n * arguments, specified as individual functions or arrays of functions.\n * @returns {Function} Returns the new function.\n * @example\n *\n * function doubled(n) {\n *   return n * 2;\n * }\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * var modded = _.modArgs(function(x, y) {\n *   return [x, y];\n * }, square, doubled);\n *\n * modded(1, 2);\n * // => [1, 4]\n *\n * modded(5, 10);\n * // => [25, 20]\n */\nvar modArgs = restParam(function(func, transforms) {\n  transforms = baseFlatten(transforms);\n  if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var length = transforms.length;\n  return restParam(function(args) {\n    var index = nativeMin(args.length, length);\n    while (index--) {\n      args[index] = transforms[index](args[index]);\n    }\n    return func.apply(this, args);\n  });\n});\n\nmodule.exports = modArgs;\n"]}