{"version":3,"sources":["partialRight.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,GAAG,OAAO,CAAC,2BAA2B,CAAC;;;AAAC,AAGzD,IAAI,kBAAkB,GAAG,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AAiC5B,IAAI,YAAY,GAAG,aAAa,CAAC,kBAAkB,CAAC;;;AAAC,AAGrD,YAAY,CAAC,WAAW,GAAG,EAAE,CAAC;;AAE9B,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC","file":"partialRight-compiled.js","sourcesContent":["var createPartial = require('../internal/createPartial');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar PARTIAL_RIGHT_FLAG = 64;\n\n/**\n * This method is like `_.partial` except that partially applied arguments\n * are appended to those provided to the new function.\n *\n * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n * builds, may be used as a placeholder for partially applied arguments.\n *\n * **Note:** This method does not set the \"length\" property of partially\n * applied functions.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to partially apply arguments to.\n * @param {...*} [partials] The arguments to be partially applied.\n * @returns {Function} Returns the new partially applied function.\n * @example\n *\n * var greet = function(greeting, name) {\n *   return greeting + ' ' + name;\n * };\n *\n * var greetFred = _.partialRight(greet, 'fred');\n * greetFred('hi');\n * // => 'hi fred'\n *\n * // using placeholders\n * var sayHelloTo = _.partialRight(greet, 'hello', _);\n * sayHelloTo('fred');\n * // => 'hello fred'\n */\nvar partialRight = createPartial(PARTIAL_RIGHT_FLAG);\n\n// Assign default placeholders.\npartialRight.placeholder = {};\n\nmodule.exports = partialRight;\n"]}