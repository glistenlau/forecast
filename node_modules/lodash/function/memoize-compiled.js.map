{"version":3,"sources":["memoize.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,GAAG,OAAO,CAAC,sBAAsB,CAAC;;;AAAC,AAG/C,IAAI,eAAe,GAAG,qBAAqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AAqD5C,SAAS,OAAO,CAAC,IAAI,EAAE,QAAQ,EAAE;AAC/B,MAAI,OAAO,IAAI,IAAI,UAAU,IAAK,QAAQ,IAAI,OAAO,QAAQ,IAAI,UAAU,AAAC,EAAE;AAC5E,UAAM,IAAI,SAAS,CAAC,eAAe,CAAC,CAAC;GACtC;AACD,MAAI,QAAQ,GAAG,YAAW;AACxB,QAAI,IAAI,GAAG,SAAS;QAChB,GAAG,GAAG,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;QACrD,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;;AAE3B,QAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;AAClB,aAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KACvB;AACD,QAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACpC,YAAQ,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AACxC,WAAO,MAAM,CAAC;GACf,CAAC;AACF,UAAQ,CAAC,KAAK,GAAG,IAAI,OAAO,CAAC,KAAK,EAAA,CAAC;AACnC,SAAO,QAAQ,CAAC;CACjB;;;AAAA,AAGD,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC;;AAEzB,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"memoize-compiled.js","sourcesContent":["var MapCache = require('../internal/MapCache');\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is coerced to a string and used as the\n * cache key. The `func` is invoked with the `this` binding of the memoized\n * function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoizing function.\n * @example\n *\n * var upperCase = _.memoize(function(string) {\n *   return string.toUpperCase();\n * });\n *\n * upperCase('fred');\n * // => 'FRED'\n *\n * // modifying the result cache\n * upperCase.cache.set('fred', 'BARNEY');\n * upperCase('fred');\n * // => 'BARNEY'\n *\n * // replacing `_.memoize.Cache`\n * var object = { 'user': 'fred' };\n * var other = { 'user': 'barney' };\n * var identity = _.memoize(_.identity);\n *\n * identity(object);\n * // => { 'user': 'fred' }\n * identity(other);\n * // => { 'user': 'fred' }\n *\n * _.memoize.Cache = WeakMap;\n * var identity = _.memoize(_.identity);\n *\n * identity(object);\n * // => { 'user': 'fred' }\n * identity(other);\n * // => { 'user': 'barney' }\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new memoize.Cache;\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n"]}