{"version":3,"sources":["partial.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,GAAG,OAAO,CAAC,2BAA2B,CAAC;;;AAAC,AAGzD,IAAI,YAAY,GAAG,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AAkCtB,IAAI,OAAO,GAAG,aAAa,CAAC,YAAY,CAAC;;;AAAC,AAG1C,OAAO,CAAC,WAAW,GAAG,EAAE,CAAC;;AAEzB,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"partial-compiled.js","sourcesContent":["var createPartial = require('../internal/createPartial');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar PARTIAL_FLAG = 32;\n\n/**\n * Creates a function that invokes `func` with `partial` arguments prepended\n * to those provided to the new function. This method is like `_.bind` except\n * it does **not** alter the `this` binding.\n *\n * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n * builds, may be used as a placeholder for partially applied arguments.\n *\n * **Note:** This method does not set the \"length\" property of partially\n * applied functions.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to partially apply arguments to.\n * @param {...*} [partials] The arguments to be partially applied.\n * @returns {Function} Returns the new partially applied function.\n * @example\n *\n * var greet = function(greeting, name) {\n *   return greeting + ' ' + name;\n * };\n *\n * var sayHelloTo = _.partial(greet, 'hello');\n * sayHelloTo('fred');\n * // => 'hello fred'\n *\n * // using placeholders\n * var greetFred = _.partial(greet, _, 'fred');\n * greetFred('hi');\n * // => 'hi fred'\n */\nvar partial = createPartial(PARTIAL_FLAG);\n\n// Assign default placeholders.\npartial.placeholder = {};\n\nmodule.exports = partial;\n"]}