{"version":3,"sources":["curryRight.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,GAAG,OAAO,CAAC,yBAAyB,CAAC;;;AAAC,AAGrD,IAAI,gBAAgB,GAAG,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AAuC1B,IAAI,UAAU,GAAG,WAAW,CAAC,gBAAgB,CAAC;;;AAAC,AAG/C,UAAU,CAAC,WAAW,GAAG,EAAE,CAAC;;AAE5B,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC","file":"curryRight-compiled.js","sourcesContent":["var createCurry = require('../internal/createCurry');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar CURRY_RIGHT_FLAG = 16;\n\n/**\n * This method is like `_.curry` except that arguments are applied to `func`\n * in the manner of `_.partialRight` instead of `_.partial`.\n *\n * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n * builds, may be used as a placeholder for provided arguments.\n *\n * **Note:** This method does not set the \"length\" property of curried functions.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to curry.\n * @param {number} [arity=func.length] The arity of `func`.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {Function} Returns the new curried function.\n * @example\n *\n * var abc = function(a, b, c) {\n *   return [a, b, c];\n * };\n *\n * var curried = _.curryRight(abc);\n *\n * curried(3)(2)(1);\n * // => [1, 2, 3]\n *\n * curried(2, 3)(1);\n * // => [1, 2, 3]\n *\n * curried(1, 2, 3);\n * // => [1, 2, 3]\n *\n * // using placeholders\n * curried(3)(1, _)(2);\n * // => [1, 2, 3]\n */\nvar curryRight = createCurry(CURRY_RIGHT_FLAG);\n\n// Assign default placeholders.\ncurryRight.placeholder = {};\n\nmodule.exports = curryRight;\n"]}