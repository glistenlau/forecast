{"version":3,"sources":["sum.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,GAAG,OAAO,CAAC,sBAAsB,CAAC;IAC1C,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC;IAClD,OAAO,GAAG,OAAO,CAAC,qBAAqB,CAAC;IACxC,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC;IACpC,cAAc,GAAG,OAAO,CAAC,4BAA4B,CAAC;IACtD,UAAU,GAAG,OAAO,CAAC,wBAAwB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AAkCnD,SAAS,GAAG,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE;AAC1C,MAAI,OAAO,IAAI,cAAc,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE;AAC5D,YAAQ,GAAG,SAAS,CAAC;GACtB;AACD,UAAQ,GAAG,YAAY,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;AAC9C,SAAO,QAAQ,CAAC,MAAM,IAAI,CAAC,GACvB,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,CAAC,GAC7E,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;CACnC;;AAED,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC","file":"sum-compiled.js","sourcesContent":["var arraySum = require('../internal/arraySum'),\n    baseCallback = require('../internal/baseCallback'),\n    baseSum = require('../internal/baseSum'),\n    isArray = require('../lang/isArray'),\n    isIterateeCall = require('../internal/isIterateeCall'),\n    toIterable = require('../internal/toIterable');\n\n/**\n * Gets the sum of the values in `collection`.\n *\n * @static\n * @memberOf _\n * @category Math\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {Function|Object|string} [iteratee] The function invoked per iteration.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {number} Returns the sum.\n * @example\n *\n * _.sum([4, 6]);\n * // => 10\n *\n * _.sum({ 'a': 4, 'b': 6 });\n * // => 10\n *\n * var objects = [\n *   { 'n': 4 },\n *   { 'n': 6 }\n * ];\n *\n * _.sum(objects, function(object) {\n *   return object.n;\n * });\n * // => 10\n *\n * // using the `_.property` callback shorthand\n * _.sum(objects, 'n');\n * // => 10\n */\nfunction sum(collection, iteratee, thisArg) {\n  if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {\n    iteratee = undefined;\n  }\n  iteratee = baseCallback(iteratee, thisArg, 3);\n  return iteratee.length == 1\n    ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)\n    : baseSum(collection, iteratee);\n}\n\nmodule.exports = sum;\n"]}